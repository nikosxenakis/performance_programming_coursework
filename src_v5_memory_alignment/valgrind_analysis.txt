--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
3,258,991,307 1,859 1,834 877,859,512 88,408,666 47,224,885 801,300,717 21,029,359 21,023,119  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
2,130,060,970   66   66 650,572,815 72,641,807 31,483,788 398,556,200 15,732,490 15,726,341  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v5_memory_alignment/MD.c:evolve
  335,626,570    7    7          20         20         14 335,626,240  5,244,160  5,244,160  ???:__intel_avx_rep_memset
  335,544,320    3    3 125,798,400 15,724,800 15,724,800           0          0          0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v5_memory_alignment/util.c:evolve
  177,995,603  117  115  36,923,465         56         55  26,795,871     40,991     40,991  ???:__printf_fp
   57,687,050    6    6  19,142,415          0          0   8,916,864          5          5  ???:hack_digit.13574
   43,119,322   90   85   9,853,458        123         99  10,016,744         55         47  ???:vfprintf
   41,614,180   11   10   6,128,335          0          0   4,132,970          5          5  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,293      9,290   2,584,580      4,611      4,611  ???:_IO_vfscanf
   19,693,229   17   17   5,266,055          0          0   4,857,846          0          0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4          4   1,380,234          3          3  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0          0   2,744,860         11         11  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    6   2,211,865          0          0     552,965          0          0  ???:read_int
    7,005,464    3    3     778,402          0          0     389,219      5,450      5,445  ???:__GI_mempcpy
    5,345,440    3    3   1,290,275          0          0     921,625          0          0  ???:_IO_padn
    4,711,833    2    2     409,727         17         12           0          0          0  ???:strchrnul
    4,233,264    7    7     650,954          2          2     364,873          1          1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0          0     921,630          5          5  ???:__mpn_extract_double
    3,796,909    4    4     506,255          0          0     253,128          0          0  ???:__mpn_lshift
    3,376,910    6    6     423,862          1          1     266,662          1          1  ???:__GI_memcpy

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v5_memory_alignment/util.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr       DLmr Dw D1mw DLmw 

-- line 18 ----------------------------------------
          .    .    .           .          .          .  .    .    .  {
          .    .    .           .          .          .  .    .    .    int k;
          .    .    .           .          .          .  .    .    .          for(k=0;k<N;k++){
          .    .    .           .          .          .  .    .    .            r[k] += (delta[k] * delta[k]);
          .    .    .           .          .          .  .    .    .          }
          .    .    .           .          .          .  .    .    .  }
          .    .    .           .          .          .  .    .    .  
          .    .    .           .          .          .  .    .    .  double force(double W, double delta, double r){
335,544,320    3    3 125,798,400 15,724,800 15,724,800  0    0    0    return W*delta/(pow(r,3.0));
          .    .    .           .          .          .  .    .    .  }
          .    .    .           .          .          .  .    .    .  
          .    .    .           .          .          .  .    .    .  
          .    .    .           .          .          .  .    .    .  

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v5_memory_alignment/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 

-- line 10 ----------------------------------------
          .    .    .           .          .          .           .          .          .  void add_norm(int N,double *r, double *delta);
          .    .    .           .          .          .           .          .          .  double force(double W, double delta, double r);
          .    .    .           .          .          .           .          .          .  void wind_force(int N,double *f, double *vis, double vel);
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
         40    2    2           0          0          0          20          0          0  void evolve(int count,double dt) {
          .    .    .           .          .          .           .          .          .    int  step;
          .    .    .           .          .          .           .          .          .    int i,j,k,l;
          .    .    .           .          .          .           .          .          .    int collided;
          .    .    .           .          .          .           .          .          .    double Size;
          .    .    .           .          .          .           .          .          .    /*
          .    .    .           .          .          .           .          .          .    * Loop over timesteps.
          .    .    .           .          .          .           .          .          .    */
          .    .    .           .          .          .           .          .          .    count = 1;
          .    .    .           .          .          .           .          .          .    for(step = 1;step<=count;step++){
         20    0    0           0          0          0           5          0          0      printf("timestep %d\n",step);
         25    0    0           5          5          0           5          0          0      printf("collisions %d\n",collisions);
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* set the viscosity term in the force calculation */
          .    .    .           .          .          .           .          .          .      for(j=0;j<Ndim;j++){
          .    .    .           .          .          .           .          .          .        // visc_force(Nbody,f[j],vis,velo[j]);
     81,930    0    0           0          0          0           0          0          0        for(i=0;i<Nbody;i++){
     61,440    0    0      40,960      2,565          4           0          0          0          f[i][j] = -vis[i] * velo[i][j];
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* add the wind term in the force calculation */
          .    .    .           .          .          .           .          .          .      for(j=0;j<Ndim;j++){
          .    .    .           .          .          .           .          .          .        // wind_force(Nbody,f[j],vis,wind[j]);
          .    .    .           .          .          .           .          .          .        for(i=0;i<Nbody;i++){
    122,900    2    2      40,970      7,685          4      40,960      7,680      1,536          f[i][j] += -vis[i] * wind[j];
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* calculate distance from central mass */
          .    .    .           .          .          .           .          .          .      for(k=0;k<Nbody;k++){
         20    0    0           0          0          0           5          5          0        r[k] = 0.0;
          .    .    .           .          .          .           .          .          .      }
      5,130    0    0           0          0          0           0          0          0      for(i=0;i<Nbody;i++){
          .    .    .           .          .          .           .          .          .        // add_norm(Ndim,&r[i],pos[i]);
          .    .    .           .          .          .           .          .          .        for(k=0;k<Ndim;k++) {
    103,680   29   29      66,560     10,160          0       5,120          0          0          r[i] += pos[i][k]*pos[i][k];
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
      3,850    0    0           0          0          0           0          0          0      for(k=0;k<Nbody;k++){
     10,240    5    5       5,120      2,475          0       5,120          0          0        r[k] = sqrt(r[k]);
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .      /* calculate central force */
     81,930    0    0           0          0          0           0          0          0      for(i=0;i<Nbody;i++){
          .    .    .           .          .          .           .          .          .        for(l=0;l<Ndim;l++){
    163,845    3    3     122,885     20,460          0      40,960          0          0          f[i][l] -= force(G*mass[i]*M_central,pos[i][l],r[i]);
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .      /* calculate pairwise separation of particles */
          5    0    0           0          0          0           0          0          0      k = 0;
     40,980    1    1           0          0          0           0          0          0      for(i=0;i<Nbody;i++){
 84,295,585    1    1           0          0          0           0          0          0        for(j=i+1;j<Nbody;j++){
     20,470    0    0           0          0          0           0          0          0          for(l=0;l<Ndim;l++){
251,719,650    9    9 125,890,530 15,231,923          0 125,798,400 15,724,800 15,724,800            delta_pos[k][l] = pos[i][l] - pos[j][l];
          .    .    .           .          .          .           .          .          .          }
 20,971,520    0    0           0          0          0           0          0          0          k = k + 1;
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* calculate norm of separation vector */
          .    .    .           .          .          .           .          .          .      for(k=0;k<Npair;k++){
         25    0    0           0          0          0           5          5          5        delta_r[k] = 0.0;
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      for(i=0;i<Ndim;i++) {
          .    .    .           .          .          .           .          .          .        // add_norm(Npair,delta_r,delta_pos[i]);
 41,932,810    1    1           0          0          0           0          0          0        for(k=0;k<Npair;k++) {
209,664,000    4    4 136,281,600 20,966,400 20,966,400  10,483,200          0          0          delta_r[k] += delta_pos[k][i]*delta_pos[k][i];
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
 31,449,605    0    0           0          0          0           0          0          0      for(k=0;k<Npair;k++){
 20,966,400    0    0  10,483,200  5,241,600  5,241,600  10,483,200          0          0        delta_r[k] = sqrt(delta_r[k]);
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /*
          .    .    .           .          .          .           .          .          .      * add pairwise forces.
          .    .    .           .          .          .           .          .          .      */
         10    0    0           0          0          0           0          0          0      k = 0;
     40,985    2    2           5          0          0           0          0          0      for(i=0;i<Nbody;i++){
167,915,510    2    2           0          0          0           0          0          0        for(j=i+1;j<Nbody;j++){
 41,953,275    0    0  41,953,275  5,183,652      2,560           0          0          0          Size = radius[i] + radius[j];
 41,932,800    0    0           0          0          0           0          0          0          collided=0;
          .    .    .           .          .          .           .          .          .          for(l=0;l<Ndim;l++){
          .    .    .           .          .          .           .          .          .            /*  flip force if close in */
209,664,000    0    0  41,932,800  5,241,600  5,241,600           0          0          0            if( delta_r[k] >= Size ){
419,348,480    2    2 167,751,680  5,185,840      2,570 125,798,400          0          0              f[i][l] -= force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
377,395,200    1    1 125,798,400 15,521,832      7,675 125,798,400          0          0              f[j][l] += force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .            else{
          .    .    .           .          .          .           .          .          .              f[i][l] += force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .          .           .          .          .              f[j][l] -= force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .          .           .          .          .              collided=1;
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .          }
125,798,400    0    0           0          0          0           0          0          0          if( collided == 1 ){
          .    .    .           .          .          .           .          .          .            collisions++;
          .    .    .           .          .          .           .          .          .          }
 83,865,600    0    0           0          0          0           0          0          0          k = k + 1;
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* update positions */
     81,930    0    0           0          0          0           0          0          0      for(i=0;i<Nbody;i++){
          .    .    .           .          .          .           .          .          .        for(j=0;j<Ndim;j++){
    204,805    1    1     122,885     15,365     15,365      61,440          0          0          pos[i][j] += + dt * velo[i][j];
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .      /* update velocities */
          .    .    .           .          .          .           .          .          .      for(i=0;i<Nbody;i++){
          .    .    .           .          .          .           .          .          .        for(j=0;j<Ndim;j++){
    163,840    1    1      81,920     10,240      6,005      40,960          0          0          velo[i][j] += + dt * (f[i][j]/mass[i]);
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .      }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .    }
          .    .    .           .          .          .           .          .          .  
         35    0    0          20          5          5           0          0          0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
76    4    4 88  100  100 50   75   75  percentage of events annotated

