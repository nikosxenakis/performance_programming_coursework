--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD -1
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
         Ir  I1mr  ILmr         Dr      D1mr   DLmr         Dw   D1mw  DLmw 
--------------------------------------------------------------------------------
325,085,514 1,708 1,556 92,048,220 8,496,098 11,564 50,073,487 33,098 9,001  PROGRAM TOTALS

--------------------------------------------------------------------------------
         Ir I1mr ILmr         Dr      D1mr  DLmr         Dw   D1mw  DLmw  file:function
--------------------------------------------------------------------------------
167,167,167   40   40 61,262,734 8,434,783     2 31,842,210 10,804     7  /lustre/home/d167/s1770309/PP/performance_programming_coursework/submition_folder/src/MD.c:evolve
 35,609,839  103  100  7,386,765        12     3  5,359,800  8,198     0  ???:__printf_fp
 26,100,773   68   68  7,720,964     9,293 9,290  2,584,580  4,611 4,526  ???:_IO_vfscanf
 18,940,932    7    7     15,364     3,074     1      3,072  1,536 1,535  /lustre/home/d167/s1770309/PP/performance_programming_coursework/submition_folder/src/util.h:evolve
 18,740,564   53   53  2,628,836         4     4  1,380,234      3     3  ???:____strtod_l_internal
 11,536,730    6    6  3,828,315         0     0  1,782,512      1     0  ???:hack_digit.13574
  8,624,230   66   63  1,970,790        31     8  2,003,436     15     4  ???:vfprintf
  8,483,116    7    5  1,249,661         0     0    842,610      0     0  ???:__mpn_mul_1
  4,233,264    7    7    650,954         2     2    364,873      1     1  ???:str_to_mpn.isra.0
  3,935,851    5    5  1,052,881         0     0    971,232      0     0  ???:__mpn_divrem
  2,708,702    6    6    667,904         2     0    549,001      3     1  ???:_IO_file_xsputn@@GLIBC_2.2.5
  1,903,354    8    8    258,048         0     0    239,004      1     1  ???:round_and_return
  1,585,164    2    2    442,373         0     0    110,593      0     0  ???:read_int
  1,584,990    3    2    211,332         0     0    105,666      0     0  ???:__mpn_lshift
  1,401,140    3    3    155,686         0     0     77,847  1,089     0  ???:__GI_mempcpy
  1,362,869    5    3    161,161         2     1     91,528      2     1  ???:__GI_memcpy
  1,204,224   11   11    454,656    36,142     2    167,936  3,775     0  ???:reduction_final_strided
  1,196,032    8    8     12,288     3,775     1    557,056     34     8  ???:__intel_reduction_init_array
  1,089,522    1    1    466,938         0     0    155,646      0     0  ???:_IO_sputbackc
  1,069,088    3    3    258,055         0     0    184,325      0     0  ???:_IO_padn
  1,032,234    7    4    147,462         2     1          0      0     0  ???:__GI_strlen
    942,429    2    2     81,951         5     3          0      0     0  ???:strchrnul
    858,002    7    4    248,369         0     0    225,790      1     1  ???:__mpn_mul
    774,186    4    4     73,732         0     0    184,330      1     0  ???:__mpn_extract_double
    625,073    3    3    110,307         0     0     73,538      0     0  ???:__mpn_rshift
    479,258    2    1     36,866         0     0          0      0     0  ???:isinf
    401,408    1    1     86,016         0     0     28,672      0     0  ???:__mpn_construct_double

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/submition_folder/src/MD.c
--------------------------------------------------------------------------------
        Ir I1mr ILmr         Dr      D1mr DLmr         Dw  D1mw DLmw 

-- line 4 ----------------------------------------
         .    .    .          .         .    .          .     .    .   */
         .    .    .          .         .    .          .     .    .  #include <stdio.h>
         .    .    .          .         .    .          .     .    .  #include <math.h>
         .    .    .          .         .    .          .     .    .  #include <string.h>
         .    .    .          .         .    .          .     .    .  #include "coord.h"
         .    .    .          .         .    .          .     .    .  #include "util.h"
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .  void evolve(int Nstep, double dt, double pos[][Ndim], double velo[][Ndim], double f[][Ndim], double * restrict vis, \
        27    2    2          3         0    0         12     4    4   double * restrict radius, double * restrict mass, double * restrict wind) {
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .    int  step;
    12,288    1    1          0         0    0          0     0    0    int i,j,k,l;
10,475,520    1    1          0         0    0          0     0    0    double radius_sum, force_val, mass_square, r, delta_r;
         .    .    .          .         .    .          .     .    .    double delta_pos[Ndim + PADDING] __attribute__((aligned(64)));
         .    .    .          .         .    .          .     .    .    double tmp_f[Ndim + PADDING] __attribute__((aligned(64)));
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .    /*
         .    .    .          .         .    .          .     .    .    * Loop over timesteps.
         .    .    .          .         .    .          .     .    .    */
         6    0    0          0         0    0          0     0    0    for(step = 1;step<=Nstep;step++){
         5    0    0          0         0    0          1     0    0      printf("timestep %d\n",step);
         4    1    1          1         1    0          1     0    0      printf("collisions %d\n",collisions);
         .    .    .          .         .    .          .     .    .      
         .    .    .          .         .    .          .     .    .      #pragma simd aligned linear(vis, mass)
     4,102    0    0          4         0    0          0     0    0      for(i=0; i<Nbody; i++) {
         .    .    .          .         .    .          .     .    .        /* calculate distance from central mass */
         .    .    .          .         .    .          .     .    .        r = add_norm(Ndim, pos[i]);
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .        /* set the viscosity term in the force calculation */
         .    .    .          .         .    .          .     .    .        /* add the wind term in the force calculation */
     1,024    0    0      1,024       512    0          0     0    0        visc_wind_force(Ndim, f[i], vis[i], velo[i], wind);
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .        /* calculate central force */
         .    .    .          .         .    .          .     .    .        for(l=0; l<Ndim; l++) {
    28,673    3    3      7,169       513    0      3,072     0    0          f[i][l] -= force(G_mul_M_central*mass[i],pos[i][l],r);
         .    .    .          .         .    .          .     .    .        }
         .    .    .          .         .    .          .     .    .      }
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .      /*
         .    .    .          .         .    .          .     .    .      * add pairwise forces.
         .    .    .          .         .    .          .     .    .      */
         .    .    .          .         .    .          .     .    .      k = 0;
    12,296    2    2          1         1    0          2     1    0      for(i=0; i<Nbody; i++) {
    40,961    1    1          0         0    0     12,288     2    1        memset(tmp_f, 0, Ndim*sizeof(double));
         .    .    .          .         .    .          .     .    .        #pragma simd aligned private(delta_r, delta_pos, force_val, mass_square, radius_sum) reduction(+:tmp_f, collisions)
 6,412,271    6    6          0         0    0      8,192 3,606    0        for(j=i+1; j<Nbody; j++) {
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .          /* calculate pairwise separation of particles */
         .    .    .          .         .    .          .     .    .          for(l=0; l<Ndim; l++) {
37,807,074    2    2 18,915,309 3,112,863    1     12,285 3,587    0            delta_pos[l] = pos[i][l] - pos[j][l];
         .    .    .          .         .    .          .     .    .          }
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .          /* calculate norm of separation vector */
         .    .    .          .         .    .          .     .    .          delta_r = add_norm(Ndim, delta_pos);
         .    .    .          .         .    .          .     .    .  
 4,217,844    1    1  4,210,680 1,036,912    0          0     0    0          radius_sum = radius[i] + radius[j];
 4,229,101    1    1  4,217,845 1,040,604    0          0     0    0          mass_square = G*mass[i]*mass[j];
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .          /*  flip force if close in */
12,587,005    1    1  2,095,105         1    1          0     0    0          if( delta_r >= radius_sum ) {
         .    .    .          .         .    .          .     .    .            for(l=0; l<Ndim; l++) {
         .    .    .          .         .    .          .     .    .              force_val = force(mass_square,delta_pos[l],delta_r);
21,919,005    4    4  6,568,893   117,814    0  6,568,893     0    0              tmp_f[l] -= force_val;
69,256,140    4    4 25,171,956 3,112,606    0 25,196,508     2    2              f[j][l] += force_val;
         .    .    .          .         .    .          .     .    .            }
         .    .    .          .         .    .          .     .    .          }
         .    .    .          .         .    .          .     .    .          else {
         .    .    .          .         .    .          .     .    .            for(l=0; l<Ndim; l++) {
         .    .    .          .         .    .          .     .    .              force_val = force(mass_square,delta_pos[l],delta_r);
         .    .    .          .         .    .          .     .    .              tmp_f[l] += force_val;
         .    .    .          .         .    .          .     .    .              f[j][l] -= force_val;
         .    .    .          .         .    .          .     .    .            }
    45,012    1    1     24,552     3,608    0      4,092 3,602    0            collisions++;
         .    .    .          .         .    .          .     .    .          }
         .    .    .          .         .    .          .     .    .          k = k + 1;
         .    .    .          .         .    .          .     .    .        }
         .    .    .          .         .    .          .     .    .        for(l=0; l<Ndim; l++)
    36,866    0    0     24,576     4,510    0     12,288     0    0          f[i][l] += tmp_f[l];
         .    .    .          .         .    .          .     .    .      }
         .    .    .          .         .    .          .     .    .  
         .    .    .          .         .    .          .     .    .      #pragma simd aligned linear(mass)
     6,156    1    1          8         0    0          0     0    0      for(i=Nbody-1; i>=0; i--) {
         .    .    .          .         .    .          .     .    .        for(l=0; l<Ndim; l++) {
         .    .    .          .         .    .          .     .    .          /* update positions */
    43,009    5    5     16,385     2,948    0     12,288     0    0          pos[i][l] += + dt * velo[i][l];
         .    .    .          .         .    .          .     .    .          /* update velocities */
    32,768    3    3      9,216     1,888    0     12,288     0    0          velo[i][l] += + dt * (f[i][l]/mass[i]);
         .    .    .          .         .    .          .     .    .        }
         .    .    .          .         .    .          .     .    .      }
         .    .    .          .         .    .          .     .    .    }
        10    0    0          7         2    0          0     0    0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/submition_folder/src/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr    Dr  D1mr DLmr    Dw  D1mw  DLmw 

-- line 2 ----------------------------------------
         .    .    .     .     .    .     .     .     .  #define UTIL_H
         .    .    .     .     .    .     .     .     .  
         .    .    .     .     .    .     .     .     .  #include <math.h>
         .    .    .     .     .    .     .     .     .  
         .    .    .     .     .    .     .     .     .  // #pragma omp declare simd
         .    .    .     .     .    .     .     .     .  inline void visc_wind_force(int N,double * restrict f, double vis, double * restrict velo, double * restrict wind) {
         .    .    .     .     .    .     .     .     .    int l;
         .    .    .     .     .    .     .     .     .    for(l=0; l<N; l++){
    32,771    3    3 9,219 1,537    0 3,072 1,536 1,535      f[l] = -vis * (velo[l] + wind[l]);
         .    .    .     .     .    .     .     .     .    }
         .    .    .     .     .    .     .     .     .  }
         .    .    .     .     .    .     .     .     .  
         .    .    .     .     .    .     .     .     .  // #pragma omp declare simd
         .    .    .     .     .    .     .     .     .  inline double add_norm(int N, double * restrict delta) {
         .    .    .     .     .    .     .     .     .    int k;
         .    .    .     .     .    .     .     .     .    double r = 0.0;
         .    .    .     .     .    .     .     .     .    for(k=0;k<N;k++){
 6,303,744    2    2 6,144 1,536    0     0     0     0      r += (delta[k] * delta[k]);
         .    .    .     .     .    .     .     .     .    }
         .    .    .     .     .    .     .     .     .  
 2,114,560    1    1     0     0    0     0     0     0    return sqrt(r);
         .    .    .     .     .    .     .     .     .  }
         .    .    .     .     .    .     .     .     .  
         .    .    .     .     .    .     .     .     .  // #pragma omp declare simd inbranch
         .    .    .     .     .    .     .     .     .  inline double force(double W, double delta, double r) {
10,489,857    1    1     1     1    1     0     0     0    return W*delta/(pow(r,3.0));
         .    .    .     .     .    .     .     .     .  }
         .    .    .     .     .    .     .     .     .  
         .    .    .     .     .    .     .     .     .  #endif

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
57    3    3 67   99    0 64   37   17  percentage of events annotated

