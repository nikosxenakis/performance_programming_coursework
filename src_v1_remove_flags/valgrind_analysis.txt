--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
            Ir  I1mr  ILmr            Dr       D1mr       DLmr            Dw      D1mw      DLmw 
--------------------------------------------------------------------------------
14,676,367,828 1,645 1,620 5,274,088,946 21,518,595 11,551,200 1,435,358,160 4,222,938 4,210,429  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr            Dr       D1mr      DLmr          Dw      D1mw      DLmw  file:function
--------------------------------------------------------------------------------
5,184,159,744   10   10 1,509,949,440    768,309       108 150,994,944         0         0  ???:__libm_pow_l9
4,681,826,693   36   36 1,812,267,103 14,403,155 5,248,461 344,012,854 4,198,128 4,193,285  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v1_remove_flags/MD.c:evolve
1,560,281,698    7    6   603,979,989        214        28 100,663,392        12         5  ???:__mcount_internal
1,056,964,608    1    1   352,321,536          2         2 352,321,536         2         1  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v1_remove_flags/util.c:force
1,006,633,320    3    3   503,316,660          0         0 402,653,328        13         4  ???:mcount
  755,159,136    2    2   352,407,576  6,293,002 6,289,926  50,343,972         2         1  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v1_remove_flags/util.c:add_norm
  150,994,944    1    1    50,331,648          2         2           0         0         0  ???:pow
   83,906,560    2    2     8,390,656          0         0  16,781,312         0         0  ???:__libm_sqrt_ex
   50,359,239   80   72    50,348,300         98        23          94         2         1  ???:???
   35,609,922  100   99     7,386,776        164        11   5,359,808     8,215     8,197  ???:__printf_fp
   26,100,773   68   68     7,720,964      9,430     9,290   2,584,580     8,274       999  ???:_IO_vfscanf
   18,740,564   53   53     2,628,836          5         4   1,380,234         4         4  ???:____strtod_l_internal

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v1_remove_flags/util.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr      D1mr      DLmr          Dw  D1mw  DLmw 

          .    .    .           .         .         .           .     .     .  #include <math.h>
          .    .    .           .         .         .           .     .     .  
          .    .    .           .         .         .           .     .     .  void visc_force(int N,double *f, double *vis, double *velo)
         30    1    1           0         0         0          18     0     0  {
          .    .    .           .         .         .           .     .     .    int i;
     98,319    1    1      36,870         0         0      12,291     0     0            for(i=0;i<N;i++){
    208,896    1    1     110,592     3,076         1      12,288 1,537 1,507              f[i] = -vis[i] * velo[i];
          .    .    .           .         .         .           .     .     .            }
          6    0    0           6         0         0           0     0     0  }
          .    .    .           .         .         .           .     .     .  void wind_force(int N,double *f, double *vis, double velo)
         30    0    0           0         0         0          18     0     0  {
          .    .    .           .         .         .           .     .     .    int i;
     98,319    0    0      36,870         0         0      12,291     0     0            for(i=0;i<N;i++){
    221,184    2    2     110,592     3,075         0      12,288     0     0              f[i] = f[i] -vis[i] * velo;
          .    .    .           .         .         .           .     .     .            }
          6    0    0           6         0         0           0     0     0  }
          .    .    .           .         .         .           .     .     .  void add_norm(int N,double *r, double *delta)
         54    0    0           0         0         0          30     2     1  {
          .    .    .           .         .         .           .     .     .    int k;
201,375,774    1    1  75,515,916         0         0  25,171,974     0     0          for(k=0;k<N;k++){
553,783,296    1    1 276,891,648 6,293,002 6,289,926  25,171,968     0     0            r[k] += (delta[k] * delta[k]);
          .    .    .           .         .         .           .     .     .          }
         12    0    0          12         0         0           0     0     0  }
          .    .    .           .         .         .           .     .     .  
452,984,832    1    1           0         0         0 251,658,240     2     1  double force(double W, double delta, double r){
603,979,776    0    0 352,321,536         2         2 100,663,296     0     0    return W*delta/(pow(r,3.0));
          .    .    .           .         .         .           .     .     .  }
          .    .    .           .         .         .           .     .     .  
          .    .    .           .         .         .           .     .     .  
          .    .    .           .         .         .           .     .     .  

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v1_remove_flags/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr      D1mr      DLmr         Dw      D1mw      DLmw 

-- line 10 ----------------------------------------
          .    .    .           .         .         .          .         .         .  void add_norm(int N,double *r, double *delta);
          .    .    .           .         .         .          .         .         .  double force(double W, double delta, double r);
          .    .    .           .         .         .          .         .         .  void wind_force(int N,double *f, double *vis, double vel);
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          9    1    1           0         0         0          5         0         0  void evolve(int count,double dt){
          .    .    .           .         .         .          .         .         .  int  step;
          .    .    .           .         .         .          .         .         .  int i,j,k,l;
          .    .    .           .         .         .          .         .         .  int collided;
          .    .    .           .         .         .          .         .         .  double Size;
          .    .    .           .         .         .          .         .         .  /*
          .    .    .           .         .         .          .         .         .   * Loop over timesteps.
          .    .    .           .         .         .          .         .         .   */
          1    0    0           0         0         0          1         0         0    count = 1;
         14    0    0           5         0         0          2         0         0        for(step = 1;step<=count;step++){
          7    1    1           1         0         0          2         0         0          printf("timestep %d\n",step);
          7    0    0           1         0         0          2         0         0          printf("collisions %d\n",collisions);
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  /* set the viscosity term in the force calculation */
         26    1    1           7         0         0          4         0         0          for(j=0;j<Ndim;j++){
         66    1    1          15         5         0          6         0         0            visc_force(Nbody,f[j],vis,velo[j]);
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  /* add the wind term in the force calculation */
         26    0    0           7         0         0          4         0         0          for(j=0;j<Ndim;j++){
         57    2    2          15         6         0          3         0         0            wind_force(Nbody,f[j],vis,wind[j]);
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  /* calculate distance from central mass */
     28,676    0    0       8,193         0         0      4,097         0         0          for(k=0;k<Nbody;k++){
     24,576    0    0       8,192         1         0      4,096       513         0            r[k] = 0.0;
          .    .    .           .         .         .          .         .         .          }
         26    1    1           7         0         0          4         0         0          for(i=0;i<Ndim;i++){
         39    1    1           9         5         0          3         0         0  	  add_norm(Nbody,r,pos[i]);
          .    .    .           .         .         .          .         .         .          }
     28,676    0    0       8,193         0         0      4,097         0         0          for(k=0;k<Nbody;k++){
     53,248    1    1      24,576       456         0     12,288         1         0            r[k] = sqrt(r[k]);
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .         /* calculate central force */
     28,677    0    0       8,193         0         0      4,097         0         0          for(i=0;i<Nbody;i++){
    106,496    1    1      28,672         0         0     16,384         0         0  	  for(l=0;l<Ndim;l++){
    245,760    0    0      86,016     1,667         0     12,288         0         0                  f[l][i] = f[l][i] - 
    356,352    3    3     159,744     2,687         0     24,576         0         0                     force(G*mass[i]*M_central,pos[l][i],r[i]);
          .    .    .           .         .         .          .         .         .  	  }
          .    .    .           .         .         .          .         .         .  	}
          .    .    .           .         .         .          .         .         .  /* calculate pairwise separation of particles */
          1    0    0           0         0         0          1         0         0          k = 0;
     28,677    1    1       8,193         0         0      4,097         0         0          for(i=0;i<Nbody;i++){
 58,730,496    1    1  16,781,312         0         0  8,390,656         0         0            for(j=i+1;j<Nbody;j++){
209,664,000    0    0  58,705,920         0         0 33,546,240         0         0              for(l=0;l<Ndim;l++){
779,950,080    2    2 276,756,480 3,071,824         0 25,159,680 3,149,291 3,144,962                delta_pos[l][k] = pos[l][i] - pos[l][j];
          .    .    .           .         .         .          .         .         .              }
 25,159,680    0    0   8,386,560         0         0  8,386,560         0         0              k = k + 1;
          .    .    .           .         .         .          .         .         .            }
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  /* calculate norm of separation vector */
 58,705,924    1    1  16,773,121         0         0  8,386,561         0         0          for(k=0;k<Npair;k++){
 50,319,360    0    0  16,773,120         1         1  8,386,560 1,048,321 1,048,321            delta_r[k] = 0.0;
          .    .    .           .         .         .          .         .         .          }
         26    0    0           7         0         0          4         0         0          for(i=0;i<Ndim;i++){
         39    1    1           9         5         5          3         0         0  	  add_norm(Npair,delta_r,delta_pos[i]);
          .    .    .           .         .         .          .         .         .          }
 58,705,924    0    0  16,773,121         0         0  8,386,561         0         0          for(k=0;k<Npair;k++){
109,025,280    1    1  50,319,360 1,048,322 1,048,322 25,159,680         1         1            delta_r[k] = sqrt(delta_r[k]);
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  /*
          .    .    .           .         .         .          .         .         .   * add pairwise forces.
          .    .    .           .         .         .          .         .         .   */
          1    0    0           0         0         0          1         0         0          k = 0;
     28,677    1    1       8,193         0         0      4,097         0         0          for(i=0;i<Nbody;i++){
 58,730,496    0    0  16,781,312         0         0  8,390,656         0         0            for(j=i+1;j<Nbody;j++){
100,638,720    1    1  50,319,360 1,194,788       513  8,386,560         0         0              Size = radius[i] + radius[j];
  8,386,560    0    0           0         0         0  8,386,560         0         0              collided=0;
218,050,560    0    0  58,705,920         0         0 33,546,240         0         0              for(l=0;l<Ndim;l++){
          .    .    .           .         .         .          .         .         .  /*  flip force if close in */
201,277,440    1    1 100,638,720 1,048,321 1,048,321          0         0         0                if( delta_r[k] >= Size ){
503,193,600    1    1 176,117,760   278,119         4 25,159,680         0         0                  f[l][i] = f[l][i] - 
830,269,440    2    2 377,395,200 4,376,680 3,145,477 50,319,360         0         0                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
528,353,280    2    2 176,117,760 3,373,604     1,534 25,159,680         0         0                  f[l][j] = f[l][j] + 
830,269,440    1    1 377,395,200         0         0 50,319,360         1         1                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .         .         .          .         .         .                }else{
          .    .    .           .         .         .          .         .         .                  f[l][i] = f[l][i] + 
          .    .    .           .         .         .          .         .         .                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .         .         .          .         .         .                  f[l][j] = f[l][j] - 
          .    .    .           .         .         .          .         .         .                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .         .         .          .         .         .  		collided=1;
          .    .    .           .         .         .          .         .         .                }
          .    .    .           .         .         .          .         .         .              }
 25,159,680    1    1   8,386,560         0         0          0         0         0  	    if( collided == 1 ){
          .    .    .           .         .         .          .         .         .  	      collisions++;
          .    .    .           .         .         .          .         .         .  	    }
 25,159,680    0    0   8,386,560         0         0  8,386,560         0         0              k = k + 1;
          .    .    .           .         .         .          .         .         .            }
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  /* update positions */
     28,677    1    1       8,193         0         0      4,097         0         0          for(i=0;i<Nbody;i++){
    102,400    0    0      28,672         0         0     16,384         0         0            for(j=0;j<Ndim;j++){
    405,504    2    2     147,456     3,075     3,073     12,288         0         0              pos[j][i] = pos[j][i] + dt * velo[j][i];
          .    .    .           .         .         .          .         .         .            }
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  /* update velocities */
     28,677    0    0       8,193         0         0      4,097         0         0          for(i=0;i<Nbody;i++){
    102,400    1    1      28,672         0         0     16,384         0         0            for(j=0;j<Ndim;j++){
    479,232    2    2     184,320     3,588     1,210     12,288         0         0              velo[j][i] = velo[j][i] + dt * (f[j][i]/mass[i]);
          .    .    .           .         .         .          .         .         .            }
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .        }
          .    .    .           .         .         .          .         .         .  
          3    0    0           3         1         1          0         0         0  }
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  
          .    .    .           .         .         .          .         .         .  

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
44    3    3 48   96  100 52   99  100  percentage of events annotated

