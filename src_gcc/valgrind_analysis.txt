--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
         Ir  I1mr  ILmr          Dr      D1mr   DLmr         Dw   D1mw   DLmw 
--------------------------------------------------------------------------------
472,336,720 1,487 1,386 139,456,023 8,245,533 11,384 42,755,686 23,542 15,986  PROGRAM TOTALS

--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr      D1mr  DLmr         Dw  D1mw  DLmw  file:function
--------------------------------------------------------------------------------
251,945,007   14   14 109,123,601 8,223,958     0 25,270,281 8,912 1,536  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_gcc/MD.c:evolve
 83,988,480    2    2      57,344     4,097     0          0     0     0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_gcc/util.h:evolve
 35,609,221  100   99   7,386,635        12     3  5,359,761 8,199 8,192  ???:__printf_fp
 26,100,773   68   68   7,720,964     9,295 9,292  2,584,580 4,611 4,523  ???:_IO_vfscanf
 18,740,564   53   53   2,628,836         4     4  1,380,234     3     3  ???:____strtod_l_internal
 11,536,490    6    6   3,828,230         0     0  1,782,476     0     0  ???:hack_digit.13574
  8,624,212   64   62   1,970,785        30     8  2,003,432    14     9  ???:vfprintf
  8,483,216    5    5   1,249,668         0     0    842,618     1     0  ???:__mpn_mul_1
  4,233,264    7    7     650,954         2     2    364,873     2     2  ???:str_to_mpn.isra.0
  3,935,428    5    5   1,052,767         0     0    971,127     0     0  ???:__mpn_divrem
  2,708,253    4    4     667,820         0     0    548,996     3     1  ???:_IO_file_xsputn@@GLIBC_2.2.5
  1,903,354    8    8     258,048         0     0    239,004     0     0  ???:round_and_return
  1,585,164    2    2     442,373         0     0    110,593     0     0  ???:read_int
  1,585,009    3    3     211,335         0     0    105,668     0     0  ???:__mpn_lshift
  1,401,148    3    3     155,688         0     0     77,849 1,090 1,087  ???:__GI_mempcpy
  1,362,800    5    3     161,152         1     1     91,522     1     1  ???:__GI_memcpy
  1,089,522    1    1     466,938         0     0    155,646     0     0  ???:_IO_sputbackc
  1,069,056    3    3     258,048         0     0    184,320     0     0  ???:_IO_padn
  1,032,234    4    4     147,462         2     1          0     0     0  ???:__GI_strlen
    942,447    2    2      81,953         7     0          0     0     0  ???:strchrnul
    858,002    7    4     248,369         1     0    225,790     1     1  ???:__mpn_mul
    774,186    4    4      73,732         0     0    184,330     1     0  ???:__mpn_extract_double
    625,022    3    3     110,298         0     0     73,532     0     0  ???:__mpn_rshift
    479,258    2    1      36,866         0     0          0     0     0  ???:isinf

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_gcc/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr     Dr  D1mr DLmr Dw D1mw DLmw 

         .    .    .      .     .    .  .    .    .  #ifndef UTIL
         .    .    .      .     .    .  .    .    .  #define UTIL
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  #include <math.h>
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  // #pragma omp declare simd
         .    .    .      .     .    .  .    .    .  inline double visc_wind_force(double vis, double velo, double wind) {
    61,440    0    0 36,864 2,049    0  0    0    0    return -vis * (velo + wind);
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  // #pragma omp declare simd
         .    .    .      .     .    .  .    .    .  inline double add_norm(int N, double * restrict delta) {
         .    .    .      .     .    .  .    .    .    int k;
         .    .    .      .     .    .  .    .    .    double r = 0.0;
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .    for(k=0; k<N; k++) {
25,196,544    1    1 12,288 1,536    0  0    0    0      r += delta[k]*delta[k];
         .    .    .      .     .    .  .    .    .    }
 8,390,656    0    0      0     0    0  0    0    0    return sqrt(r);
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  // #pragma omp declare simd inbranch
         .    .    .      .     .    .  .    .    .  inline double force (double W, double delta, double r)
         .    .    .      .     .    .  .    .    .  {
50,339,840    1    1  8,192   512    0  0    0    0    return W * delta / (pow (r, 3.0));
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_gcc/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr         Dr      D1mr DLmr         Dw  D1mw  DLmw 

-- line 6 ----------------------------------------
          .    .    .          .         .    .          .     .     .  #include <math.h>
          .    .    .          .         .    .          .     .     .  #include <string.h>
          .    .    .          .         .    .          .     .     .  #include <assert.h>
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .  #include "coord.h"
          .    .    .          .         .    .          .     .     .  #include "util.h"
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .  void evolve (int Nstep, double dt, double f[][Ndim] , double pos[][Ndim] , const double * restrict vis, \
         19    0    0          2         0    0         11     0     0    double velo[][Ndim] , double * restrict mass, const double * restrict radius, const double * restrict wind) {
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .    int i, j, k, l;
          .    .    .          .         .    .          .     .     .    unsigned int step;
          .    .    .          .         .    .          .     .     .    double force_val, mass_square, radious_add, delta_r, r;
          .    .    .          .         .    .          .     .     .    double delta_pos[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .          .         .    .          .     .     .    double tmp_f[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .    /*
          .    .    .          .         .    .          .     .     .     * Loop over timesteps.
          .    .    .          .         .    .          .     .     .    */
          .    .    .          .         .    .          .     .     .    Nstep=1;
          .    .    .          .         .    .          .     .     .    for(step = 1;step<=Nstep;++step)
          .    .    .          .         .    .          .     .     .    {
          4    1    1          0         0    0          1     0     0      printf("timestep %d\n",step);
         14    1    1          7         2    0          1     0     0      printf("collisions %d\n",collisions);
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .      /* calculate distance from central mass */
          .    .    .          .         .    .          .     .     .      #pragma simd aligned linear(vis, mass)
          .    .    .          .         .    .          .     .     .      #pragma GCC ivdep
      8,195    0    0          1         1    0          0     0     0      for(i=0; i<Nbody; ++i) {
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .        r = add_norm(Ndim, pos[i]);
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; l++) {
     32,768    2    2     16,384         0    0     12,288 1,536 1,536          f[i][l] = visc_wind_force(vis[i], velo[i][l], wind[l]);
     24,576    0    0          0         0    0     12,288     0     0          f[i][l] -= force(M_central_x_G*mass[i], pos[i][l], r);
          .    .    .          .         .    .          .     .     .        }
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .      }
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .      k = 0;
          .    .    .          .         .    .          .     .     .  
      8,200    1    1          2         0    0          0     0     0      for(i=0; i<Nbody; ++i) {
     45,058    1    1          0         0    0     32,768     1     0        memset(tmp_f, 0, sizeof(tmp_f));
          .    .    .          .         .    .          .     .     .        #pragma simd aligned private(delta_r, delta_pos, force_val, mass_square, radious_add) reduction(+:tmp_f, collisions)
          .    .    .          .         .    .          .     .     .        #pragma GCC ivdep
 16,838,649    1    1      8,190     3,737    0          0     0     0        for(j=Nbody-1; j>=i+1; --j) {
          .    .    .          .         .    .          .     .     .          for(l=0;l<Ndim;++l) 
 50,319,360    1    1 50,319,360 3,079,868    0          0     0     0            delta_pos[l] = pos[i][l] - pos[j][l];
          .    .    .          .         .    .          .     .     .          delta_r = add_norm(Ndim, delta_pos);
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .  
 25,159,680    0    0 16,773,120 1,025,562    0          0     0     0          mass_square = G*mass[i]*mass[j];
 16,773,120    1    1 16,773,120 1,025,624    0          0     0     0          radious_add = radius[i] + radius[j];
          .    .    .          .         .    .          .     .     .  
 16,773,120    0    0          0         0    0          0     0     0          if( delta_r >= radious_add ) {
          .    .    .          .         .    .          .     .     .            for(l=0;l<Ndim;l++) {
          .    .    .          .         .    .          .     .     .              force_val = force(mass_square, delta_pos[l], delta_r);
100,638,720    1    1 25,159,680 3,083,010    0 25,159,680     0     0              f[j][l] += force_val;
 25,159,680    0    0          0         0    0          0     0     0              tmp_f[l] -= force_val;
          .    .    .          .         .    .          .     .     .            }
          .    .    .          .         .    .          .     .     .          }
          .    .    .          .         .    .          .     .     .          else {
          .    .    .          .         .    .          .     .     .            for(l=0; l<Ndim; l++) {
          .    .    .          .         .    .          .     .     .              force_val = force(mass_square, delta_pos[l], delta_r);
     16,380    1    1          0         0    0     16,380 7,375     0              f[j][l] -= force_val;
          .    .    .          .         .    .          .     .     .              tmp_f[l] += force_val;
          .    .    .          .         .    .          .     .     .            }
          .    .    .          .         .    .          .     .     .            collisions++;
          .    .    .          .         .    .          .     .     .          }
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .          k = k + 1;
          .    .    .          .         .    .          .     .     .        }
          .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; l++)
     36,864    1    1     12,288     1,347    0     12,288     0     0          f[i][l] += tmp_f[l];
          .    .    .          .         .    .          .     .     .      }
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .      #pragma simd aligned linear(mass)
          .    .    .          .         .    .          .     .     .      #pragma GCC ivdep
      8,192    0    0          0         0    0          0     0     0      for(i=Nbody-1; i>=0; --i) {
          .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; ++l) {
          .    .    .          .         .    .          .     .     .          /* update positions */
     53,248    1    1     24,576     2,946    0     12,288     0     0          pos[i][l] += dt * velo[i][l];        
          .    .    .          .         .    .          .     .     .          /* update velocities */
     49,152    1    1     36,864     1,859    0     12,288     0     0          velo[i][l] += dt * (f[i][l]/mass[i]);
          .    .    .          .         .    .          .     .     .        }
          .    .    .          .         .    .          .     .     .      }
          .    .    .          .         .    .          .     .     .  
          .    .    .          .         .    .          .     .     .    }
          8    0    0          7         2    0          0     0     0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
71    1    1 78  100    0 59   38   10  percentage of events annotated

