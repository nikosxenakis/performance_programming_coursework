--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
3,259,251,061 1,845 1,828 856,964,765 88,418,926 47,224,890 801,382,579 21,029,350 21,023,114  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
1,930,858,425   45   45 514,245,140 51,667,798 10,517,388 398,576,680 15,732,490 15,726,341  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v6_loop_interchange/MD.c:evolve
  535,006,720   20   20 241,231,360 36,709,045 36,691,200      61,440          0          0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v6_loop_interchange/util.h:evolve
  335,626,570   14   14          20         20         14 335,626,240  5,244,160  5,244,160  ???:__intel_avx_rep_memset
  177,995,680  120  119  36,923,484         56         55  26,795,875     40,992     40,992  ???:__printf_fp
   57,687,055    6    6  19,142,417          0          0   8,916,866          5          5  ???:hack_digit.13574
   43,119,232   85   85   9,853,433        128        104  10,016,724         55         47  ???:vfprintf
   41,614,180   10   10   6,128,335          0          0   4,132,970          5          5  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,294      9,291   2,584,580      4,611      4,611  ???:_IO_vfscanf
   19,693,237   17   17   5,266,056          0          0   4,857,847          0          0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4          4   1,380,234          3          3  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0          0   2,744,860         11         11  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    6   2,211,865          0          0     552,965          0          0  ???:read_int
    7,005,488    3    3     778,408          0          0     389,225      5,449      5,444  ???:__GI_mempcpy
    5,345,280    3    3   1,290,240          0          0     921,600          0          0  ???:_IO_padn
    4,711,833    2    2     409,727         13         12           0          0          0  ???:strchrnul
    4,233,264    7    7     650,954          2          2     364,873          1          1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0          0     921,630          5          5  ???:__mpn_extract_double
    3,796,909    4    4     506,255          0          0     253,128          0          0  ???:__mpn_lshift
    3,376,910    6    6     423,862          1          1     266,662          1          1  ???:__GI_memcpy

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v6_loop_interchange/util.h
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr       DLmr     Dw D1mw DLmw 

-- line 8 ----------------------------------------
          .    .    .           .          .          .      .    .    .    for(l=0; l<N; l++) {
          .    .    .           .          .          .      .    .    .      f[l] = -vis * velo[l];
          .    .    .           .          .          .      .    .    .    }
          .    .    .           .          .          .      .    .    .  }
          .    .    .           .          .          .      .    .    .  
          .    .    .           .          .          .      .    .    .  inline void wind_force(int N,double * restrict f, double vis, double * restrict wind) {
          .    .    .           .          .          .      .    .    .    int l;
          .    .    .           .          .          .      .    .    .    for(l=0; l<N; l++){
    184,320    5    5      61,440      7,680          0 61,440    0    0      f[l] += -vis * wind[l];
          .    .    .           .          .          .      .    .    .    }
          .    .    .           .          .          .      .    .    .  }
          .    .    .           .          .          .      .    .    .  
          .    .    .           .          .          .      .    .    .  inline void add_norm(int N,double * restrict r, double * restrict delta) {
          .    .    .           .          .          .      .    .    .    int k;
          .    .    .           .          .          .      .    .    .    for(k=0;k<N;k++){
199,278,080   10   10 115,371,520 20,976,565 20,966,400      0    0    0      *r += (delta[k] * delta[k]);
          .    .    .           .          .          .      .    .    .    }
          .    .    .           .          .          .      .    .    .  }
          .    .    .           .          .          .      .    .    .  
          .    .    .           .          .          .      .    .    .  inline double force(double W, double delta, double r) {
335,544,320    5    5 125,798,400 15,724,800 15,724,800      0    0    0    return W*delta/(pow(r,3.0));
          .    .    .           .          .          .      .    .    .  }
          .    .    .           .          .          .      .    .    .  
          .    .    .           .          .          .      .    .    .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v6_loop_interchange/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr      DLmr          Dw       D1mw       DLmw 

-- line 2 ----------------------------------------
          .    .    .           .          .         .           .          .          .   *  Simple molecular dynamics code.
          .    .    .           .          .         .           .          .          .   *
          .    .    .           .          .         .           .          .          .   */
          .    .    .           .          .         .           .          .          .  #include <stdio.h>
          .    .    .           .          .         .           .          .          .  #include <math.h>
          .    .    .           .          .         .           .          .          .  #include "coord.h"
          .    .    .           .          .         .           .          .          .  #include "util.h"
          .    .    .           .          .         .           .          .          .  
         40    1    1           0          0         0          20          0          0  void evolve(int count,double dt) {
          .    .    .           .          .         .           .          .          .    int  step;
     81,920    0    0           0          0         0           0          0          0    int i,j,k,l;
          .    .    .           .          .         .           .          .          .    int collided;
          .    .    .           .          .         .           .          .          .    double Size;
          .    .    .           .          .         .           .          .          .    /*
          .    .    .           .          .         .           .          .          .    * Loop over timesteps.
          .    .    .           .          .         .           .          .          .    */
          .    .    .           .          .         .           .          .          .    count = 1;
          .    .    .           .          .         .           .          .          .    for(step = 1;step<=count;step++){
         20    0    0           0          0         0           5          0          0      printf("timestep %d\n",step);
         25    1    1           5          5         0           5          0          0      printf("collisions %d\n",collisions);
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* set the viscosity term in the force calculation */
     10,250    5    5           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .         .           .          .          .        // visc_force(Ndim, f[i], vis[i], velo[i]);
     25,600    0    0           0          0         0           0          0          0        for(l=0; l<Ndim; l++) {
    189,440    3    3      81,920     10,240         0      61,440      7,680      1,536          f[i][l] = -vis[i] * velo[i][l];
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* add the wind term in the force calculation */
     81,930    5    5           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
     20,500    0    0      20,495      2,565         4           0          0          0        wind_force(Ndim, f[i], vis[i], wind);
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* calculate distance from central mass */
          .    .    .           .          .         .           .          .          .      for(i=0; i<Nbody; i++) {
         25    0    0           0          0         0           5          5          0        r[i] = 0.0;
          .    .    .           .          .         .           .          .          .      }
     20,490    0    0           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
      5,120    0    0           0          0         0       5,120          0          0        add_norm(Ndim,&r[i],pos[i]);
          .    .    .           .          .         .           .          .          .      }
      3,850    2    2           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
     10,240    2    2       5,120      2,475         0       5,120          0          0        r[i] = sqrt(r[i]);
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .      /* calculate central force */
     81,930    0    0           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .         .           .          .          .        for(l=0; l<Ndim; l++) {
    163,845    5    5     122,885     20,460         4      40,960          0          0          f[i][l] -= force(G*mass[i]*M_central,pos[i][l],r[i]);
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .      /* calculate pairwise separation of particles */
          5    0    0           0          0         0           0          0          0      k = 0;
     40,980    5    5           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
 84,295,585    0    0           0          0         0           0          0          0        for(j=i+1; j<Nbody; j++) {
     20,470    0    0           0          0         0           0          0          0          for(l=0; l<Ndim; l++) {
251,719,650    5    5 125,890,530 15,231,913         0 125,798,400 15,724,800 15,724,800            delta_pos[k][l] = pos[i][l] - pos[j][l];
          .    .    .           .          .         .           .          .          .          }
 20,971,520    1    1           0          0         0           0          0          0          k = k + 1;
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* calculate norm of separation vector */
          .    .    .           .          .         .           .          .          .      for(k=0; k<Npair; k++){
         25    0    0           0          0         0           5          5          5        delta_r[k] = 0.0;
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
 41,932,810    0    0           0          0         0           0          0          0      for(k=0; k<Npair; k++) {
 10,483,200    0    0           0          0         0  10,483,200          0          0        add_norm(Ndim, &delta_r[k], delta_pos[k]);
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
 31,449,605    0    0           0          0         0           0          0          0      for(k=0; k<Npair; k++) {
 20,966,400    1    1  10,483,200  5,241,600 5,241,600  10,483,200          0          0        delta_r[k] = sqrt(delta_r[k]);
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /*
          .    .    .           .          .         .           .          .          .      * add pairwise forces.
          .    .    .           .          .         .           .          .          .      */
         10    0    0           0          0         0           0          0          0      k = 0;
     40,985    0    0           5          0         0           0          0          0      for(i=0; i<Nbody; i++) {
167,833,590    4    4           0          0         0           0          0          0        for(j=i+1; j<Nbody; j++) {
 41,953,275    0    0  41,953,275  5,183,654     2,560           0          0          0          Size = radius[i] + radius[j];
 41,932,800    0    0           0          0         0           0          0          0          collided=0;
          .    .    .           .          .         .           .          .          .          for(l=0; l<Ndim; l++) {
          .    .    .           .          .         .           .          .          .            /*  flip force if close in */
209,664,000    0    0  41,932,800  5,241,600 5,241,600           0          0          0            if( delta_r[k] >= Size ){
419,348,480    0    0 167,751,680  5,185,841     2,570 125,798,400          0          0              f[i][l] -= force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
377,395,200    2    2 125,798,400 15,521,835     7,675 125,798,400          0          0              f[j][l] += force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .         .           .          .          .            }
          .    .    .           .          .         .           .          .          .            else{
          .    .    .           .          .         .           .          .          .              f[i][l] += force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .         .           .          .          .              f[j][l] -= force(G*mass[i]*mass[j],delta_pos[k][l],delta_r[k]);
          .    .    .           .          .         .           .          .          .              collided=1;
          .    .    .           .          .         .           .          .          .            }
          .    .    .           .          .         .           .          .          .          }
125,798,400    0    0           0          0         0           0          0          0          if( collided == 1 ){
          .    .    .           .          .         .           .          .          .            collisions++;
          .    .    .           .          .         .           .          .          .          }
 83,865,600    0    0           0          0         0           0          0          0          k = k + 1;
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* update positions */
     81,930    1    1           0          0         0           0          0          0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .         .           .          .          .        for(l=0; l<Ndim; l++) {
    204,805    2    2     122,885     15,365    15,365      61,440          0          0          pos[i][l] += + dt * velo[i][l];
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .      /* update velocities */
          .    .    .           .          .         .           .          .          .      for(i=0; i<Nbody; i++) {
          .    .    .           .          .         .           .          .          .        for(l=0; l<Ndim; l++) {
    163,840    0    0      81,920     10,240     6,005      40,960          0          0          velo[i][l] += + dt * (f[i][l]/mass[i]);
          .    .    .           .          .         .           .          .          .        }
          .    .    .           .          .         .           .          .          .      }
          .    .    .           .          .         .           .          .          .  
          .    .    .           .          .         .           .          .          .    }
          .    .    .           .          .         .           .          .          .  
         35    0    0          20          5         5           0          0          0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
76    4    4 88  100  100 50   75   75  percentage of events annotated

