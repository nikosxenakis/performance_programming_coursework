--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
         Ir  I1mr  ILmr         Dr      D1mr   DLmr         Dw   D1mw   DLmw 
--------------------------------------------------------------------------------
337,292,605 1,666 1,527 93,533,100 8,311,520 11,554 49,218,032 37,131 18,245  PROGRAM TOTALS

--------------------------------------------------------------------------------
         Ir I1mr ILmr         Dr      D1mr  DLmr         Dw   D1mw  DLmw  file:function
--------------------------------------------------------------------------------
181,101,414   44   44 63,123,397 8,276,829     2 31,608,786 16,477 1,535  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_final/MD.c:evolve
 35,609,233  100   99  7,386,636        12     3  5,359,762  8,198 8,194  ???:__printf_fp
 26,100,773   68   68  7,720,964     9,293 9,290  2,584,580  4,615 4,529  ???:_IO_vfscanf
 18,917,377    5    5      9,217     1,537     1          0      0     0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_final/util.h:evolve
 18,740,564   53   53  2,628,836         4     4  1,380,234      3     3  ???:____strtod_l_internal
 11,536,490    6    6  3,828,230         0     0  1,782,476      1     0  ???:hack_digit.13574
  8,624,212   65   62  1,970,785        31     8  2,003,432     14     6  ???:vfprintf
  8,483,096    5    5  1,249,658         0     0    842,608      1     0  ???:__mpn_mul_1
  4,233,264    7    7    650,954         2     2    364,873      1     1  ???:str_to_mpn.isra.0
  3,935,428    5    5  1,052,767         0     0    971,127      0     0  ???:__mpn_divrem
  2,708,253    4    4    667,820         0     0    548,996      2     0  ???:_IO_file_xsputn@@GLIBC_2.2.5
  1,903,354    8    8    258,048         0     0    239,004      1     1  ???:round_and_return
  1,585,164    2    2    442,373         0     0    110,593      0     0  ???:read_int
  1,584,990    3    2    211,332         0     0    105,666      0     0  ???:__mpn_lshift
  1,401,148    3    3    155,688         0     0     77,849  1,090 1,087  ???:__GI_mempcpy
  1,362,800    6    3    161,152         1     1     91,522      1     1  ???:__GI_memcpy
  1,089,522    1    1    466,938         0     0    155,646      0     0  ???:_IO_sputbackc
  1,069,056    3    3    258,048         0     0    184,320      0     0  ???:_IO_padn
  1,032,234    5    4    147,462         2     1          0      0     0  ???:__GI_strlen
    942,429    2    2     81,951         5     3          0      0     0  ???:strchrnul
    858,002    7    4    248,369         2     0    225,790      1     1  ???:__mpn_mul
    774,186    4    4     73,732         0     0    184,330      1     0  ???:__mpn_extract_double
    625,039    3    3    110,301         0     0     73,534      0     0  ???:__mpn_rshift
    479,258    2    1     36,866         0     0          0      0     0  ???:isinf
    401,408    1    1     86,016         0     0     28,672      0     0  ???:__mpn_construct_double
    393,216   10   10     86,016    11,149     1     40,960  3,723     0  ???:reduction_final_strided

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_final/MD.c
--------------------------------------------------------------------------------
        Ir I1mr ILmr         Dr      D1mr DLmr         Dw  D1mw  DLmw 

-- line 6 ----------------------------------------
         .    .    .          .         .    .          .     .     .  #include <math.h>
         .    .    .          .         .    .          .     .     .  #include <string.h>
         .    .    .          .         .    .          .     .     .  #include <assert.h>
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .  #include "coord.h"
         .    .    .          .         .    .          .     .     .  #include "util.h"
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .  void evolve (int Nstep, double dt, double f[][Ndim] , double pos[][Ndim] , const double * restrict vis, \
        17    2    2          1         0    0          7     0     0    double velo[][Ndim] , double * restrict mass, const double * restrict radius, const double * restrict wind) {
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .    int i, j, k, l;
         .    .    .          .         .    .          .     .     .    unsigned int step;
10,475,520    0    0          0         0    0          0     0     0    double size, force_val, mass_square, radious_add, delta_r, r;
         .    .    .          .         .    .          .     .     .    double delta_pos[Ndim + PADDING] __attribute__((aligned(64)));
         .    .    .          .         .    .          .     .     .    double tmp_f[Ndim + PADDING] __attribute__((aligned(64)));
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .    /*
         .    .    .          .         .    .          .     .     .     * Loop over timesteps.
         .    .    .          .         .    .          .     .     .    */
         .    .    .          .         .    .          .     .     .    Nstep=1;
         .    .    .          .         .    .          .     .     .    for(step = 1;step<=Nstep;++step)
         .    .    .          .         .    .          .     .     .    {
         4    0    0          0         0    0          1     0     0      printf("timestep %d\n",step);
         4    1    1          1         1    0          1     0     0      printf("collisions %d\n",collisions);
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .      /* calculate distance from central mass */
         .    .    .          .         .    .          .     .     .      #pragma simd aligned linear(vis, mass)
     4,098    0    0          0         0    0          0     0     0      for(i=0; i<Nbody; ++i) {
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .        r = add_norm(Ndim, pos[i]);
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; l++) {
    10,243    0    0      7,171     2,049    0          0     0     0          f[i][l] = visc_wind_force(vis[i], velo[i][l], wind[l]);
    18,433    1    1      1,025       513    1      3,072 1,536 1,535          f[i][l] -= force(M_central_x_G*mass[i], pos[i][l], r);
         .    .    .          .         .    .          .     .     .        }
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .      }
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .      k = 0;
         .    .    .          .         .    .          .     .     .  
     8,202    1    1          0         0    0          4     1     0      for(i=0; i<Nbody; ++i) {
    40,960    1    1          0         0    0     12,288     2     0        memset(tmp_f, 0, sizeof(tmp_f));
         .    .    .          .         .    .          .     .     .        #pragma simd aligned private(delta_r, delta_pos, force_val, mass_square, radious_add) reduction(+:tmp_f, collisions)
10,682,304    8    8     12,276     3,687    0     40,928 3,727     0        for(j=Nbody-1; j>=i+1; --j) {
         .    .    .          .         .    .          .     .     .          for(l=0;l<Ndim;++l) 
41,981,928    4    4 21,010,413 3,092,037    0     12,285 3,735     0            delta_pos[l] = pos[i][l] - pos[j][l];
         .    .    .          .         .    .          .     .     .          delta_r = add_norm(Ndim, delta_pos);
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .  
 4,221,937    1    1  4,217,845 1,034,941    0          0     0     0          mass_square = G*mass[i]*mass[j];
 4,208,634    0    0  4,204,542 1,032,250    0          0     0     0          radious_add = radius[i] + radius[j];
         .    .    .          .         .    .          .     .     .  
16,777,212    1    1  2,099,196     3,692    1          0     0     0          if( delta_r >= radious_add ) {
         .    .    .          .         .    .          .     .     .            for(l=0;l<Ndim;l++) {
         .    .    .          .         .    .          .     .     .              force_val = force(mass_square, delta_pos[l], delta_r);
73,383,936    7    7 25,159,680 3,091,163    0 25,159,680     0     0              f[j][l] += force_val;
19,111,887    7    7  6,336,504    10,310    0  6,327,288     0     0              tmp_f[l] -= force_val;
         .    .    .          .         .    .          .     .     .            }
         .    .    .          .         .    .          .     .     .          }
         .    .    .          .         .    .          .     .     .          else {
         .    .    .          .         .    .          .     .     .            for(l=0; l<Ndim; l++) {
         .    .    .          .         .    .          .     .     .              force_val = force(mass_square, delta_pos[l], delta_r);
         .    .    .          .         .    .          .     .     .              f[j][l] -= force_val;
         .    .    .          .         .    .          .     .     .              tmp_f[l] += force_val;
         .    .    .          .         .    .          .     .     .            }
    53,196    1    1     20,460         1    0     16,368 7,476     0            collisions++;
         .    .    .          .         .    .          .     .     .          }
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .          k = k + 1;
         .    .    .          .         .    .          .     .     .        }
         .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; l++)
    40,961    1    1     28,672     1,363    0     12,288     0     0          f[i][l] += tmp_f[l];
         .    .    .          .         .    .          .     .     .      }
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .      #pragma simd aligned linear(mass)
     6,151    0    0          3         0    0          0     0     0      for(i=Nbody-1; i>=0; --i) {
         .    .    .          .         .    .          .     .     .        for(l=0; l<Ndim; ++l) {
         .    .    .          .         .    .          .     .     .          /* update positions */
    43,009    7    7     16,385     2,945    0     12,288     0     0          pos[i][l] += dt * velo[i][l];        
         .    .    .          .         .    .          .     .     .          /* update velocities */
    32,768    1    1      9,216     1,875    0     12,288     0     0          velo[i][l] += dt * (f[i][l]/mass[i]);
         .    .    .          .         .    .          .     .     .        }
         .    .    .          .         .    .          .     .     .      }
         .    .    .          .         .    .          .     .     .  
         .    .    .          .         .    .          .     .     .    }
        10    0    0          7         2    0          0     0     0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_final/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr    Dr  D1mr DLmr Dw D1mw DLmw 

         .    .    .     .     .    .  .    .    .  #ifndef UTIL
         .    .    .     .     .    .  .    .    .  #define UTIL
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .  #include <math.h>
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .  // #pragma omp declare simd
         .    .    .     .     .    .  .    .    .  inline double visc_wind_force(double vis, double velo, double wind) {
     9,216    2    2 3,072     1    1  0    0    0    return -vis * (velo + wind);
         .    .    .     .     .    .  .    .    .  }
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .  // #pragma omp declare simd
         .    .    .     .     .    .  .    .    .  inline double add_norm(int N, double * restrict delta) {
         .    .    .     .     .    .  .    .    .    int k;
         .    .    .     .     .    .  .    .    .    double r = 0.0;
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .    for(k=0; k<N; k++) {
 6,303,744    3    3 6,144 1,536    0  0    0    0      r += delta[k]*delta[k];
         .    .    .     .     .    .  .    .    .    }
 2,114,560    0    0     0     0    0  0    0    0    return sqrt(r);
         .    .    .     .     .    .  .    .    .  }
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .  // #pragma omp declare simd inbranch
         .    .    .     .     .    .  .    .    .  inline double force (double W, double delta, double r)
         .    .    .     .     .    .  .    .    .  {
10,489,857    0    0     1     0    0  0    0    0    return W * delta / (pow (r, 3.0));
         .    .    .     .     .    .  .    .    .  }
         .    .    .     .     .    .  .    .    .  
         .    .    .     .     .    .  .    .    .  #endif

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
59    3    3 67  100    0 64   44    8  percentage of events annotated

