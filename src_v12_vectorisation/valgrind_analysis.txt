--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr   DLmr          Dw    D1mw   DLmw 
--------------------------------------------------------------------------------
1,410,859,959 1,976 1,487 399,721,303 42,378,007 11,560 229,904,035 152,142 18,262  PROGRAM TOTALS

--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr  DLmr          Dw   D1mw  DLmw  file:function
--------------------------------------------------------------------------------
846,239,530   77   36 295,807,370 42,124,312     2 159,139,330 72,001     5  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v12_vectorisation/MD.c:evolve
177,995,655  121   99  36,923,480         56     3  26,795,871 40,991 8,192  ???:__printf_fp
 94,704,660   22    7      76,820     15,370     1      15,360  7,680 1,535  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v12_vectorisation/util.h:evolve
 57,687,050    6    6  19,142,415          0     0   8,916,864      5     0  ???:hack_digit.13574
 43,119,322   94   63   9,853,458        123     8  10,016,744     87     3  ???:vfprintf
 41,614,060   10    5   6,128,325          0     0   4,132,960      5     0  ???:__mpn_mul_1
 26,100,773   68   68   7,720,964      9,293 9,290   2,584,580  4,611 4,520  ???:_IO_vfscanf
 19,693,224   17    5   5,266,054          0     0   4,857,845      0     0  ???:__mpn_divrem
 18,740,564   53   53   2,628,836          4     4   1,380,234      3     3  ???:____strtod_l_internal
 13,540,553    4    4   3,338,936          0     0   2,744,860     15     1  ???:_IO_file_xsputn@@GLIBC_2.2.5
  7,925,820    6    2   2,211,865          0     0     552,965      0     0  ???:read_int
  7,005,464    3    3     778,402          0     0     389,219  5,450 1,087  ???:__GI_mempcpy
  6,021,120   16   10   2,273,280    182,175     2     839,680 18,022     0  ???:reduction_final_strided
  5,980,160   21    8      61,440     18,755     1   2,785,280    170     9  ???:__intel_reduction_init_array
  5,345,440    3    3   1,290,275          0     0     921,625      0     0  ???:_IO_padn
  4,711,833    2    2     409,727         17     3           0      0     0  ???:strchrnul
  4,233,264    7    7     650,954          2     2     364,873      1     1  ???:str_to_mpn.isra.0
  3,870,846    4    4     368,652          0     0     921,630      5     0  ???:__mpn_extract_double
  3,796,890    3    2     506,252          0     0     253,126      0     0  ???:__mpn_lshift
  3,376,910    6    3     423,862          1     1     266,662      1     1  ???:__GI_memcpy
  3,119,772    7    3     550,548          0     0     367,032      0     0  ???:__mpn_rshift
  3,096,674    5    4     442,382          6     1           0      0     0  ???:__GI_strlen
  2,787,452   11    4     806,894          5     0     733,540      1     1  ???:__mpn_mul
  2,396,238    2    1     184,326          0     0           0      0     0  ???:isinf
  1,903,354    8    8     258,048          0     0     239,004      1     1  ???:round_and_return

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v12_vectorisation/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr     Dr  D1mr DLmr     Dw  D1mw  DLmw 

-- line 16 ----------------------------------------
         .    .    .      .     .    .      .     .     .  //     f[l] += -vis * wind[l];
         .    .    .      .     .    .      .     .     .  //   }
         .    .    .      .     .    .      .     .     .  // }
         .    .    .      .     .    .      .     .     .  
         .    .    .      .     .    .      .     .     .  // #pragma omp declare simd
         .    .    .      .     .    .      .     .     .  inline void visc_wind_force(int N,double * restrict f, double vis, double * restrict velo, double * restrict wind) {
         .    .    .      .     .    .      .     .     .    int l;
         .    .    .      .     .    .      .     .     .    for(l=0; l<N; l++){
   163,855   10    4 46,095 7,685    0 15,360 7,680 1,535      f[l] = -vis * (velo[l] + wind[l]);
         .    .    .      .     .    .      .     .     .    }
         .    .    .      .     .    .      .     .     .  }
         .    .    .      .     .    .      .     .     .  
         .    .    .      .     .    .      .     .     .  // #pragma omp declare simd
         .    .    .      .     .    .      .     .     .  inline double add_norm(int N, double * restrict delta) {
         .    .    .      .     .    .      .     .     .    int k;
         .    .    .      .     .    .      .     .     .    double r = 0.0;
         .    .    .      .     .    .      .     .     .    for(k=0;k<N;k++){
31,518,720    5    1 30,720 7,680    0      0     0     0      r += (delta[k] * delta[k]);
         .    .    .      .     .    .      .     .     .    }
         .    .    .      .     .    .      .     .     .  
10,572,800    0    0      0     0    0      0     0     0    return sqrt(r);
         .    .    .      .     .    .      .     .     .  }
         .    .    .      .     .    .      .     .     .  
         .    .    .      .     .    .      .     .     .  // #pragma omp declare simd inbranch
         .    .    .      .     .    .      .     .     .  inline double force(double W, double delta, double r) {
52,449,285    7    2      5     5    1      0     0     0    return W*delta/(pow(r,3.0));
         .    .    .      .     .    .      .     .     .  }
         .    .    .      .     .    .      .     .     .  
         .    .    .      .     .    .      .     .     .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v12_vectorisation/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr DLmr          Dw   D1mw DLmw 

-- line 4 ----------------------------------------
          .    .    .           .          .    .           .      .    .   */
          .    .    .           .          .    .           .      .    .  #include <stdio.h>
          .    .    .           .          .    .           .      .    .  #include <math.h>
          .    .    .           .          .    .           .      .    .  #include <string.h>
          .    .    .           .          .    .           .      .    .  #include "coord.h"
          .    .    .           .          .    .           .      .    .  #include "util.h"
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .  void evolve(int Nstep, double dt, double pos[][Ndim], double velo[][Ndim], double f[][Ndim], double * restrict vis, \
         90    6    2          10          0    0          35      5    1   double * restrict radius, double * restrict mass, double * restrict wind) {
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .    int  step;
     61,440    0    0           0          0    0           0      0    0    int i,j,k,l;
 52,377,600    0    0           0          0    0           0      0    0    double radius_sum, force_val, mass_square, r, delta_r;
          .    .    .           .          .    .           .      .    .    double delta_pos[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .           .          .    .           .      .    .    double tmp_f[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .    /*
          .    .    .           .          .    .           .      .    .    * Loop over timesteps.
          .    .    .           .          .    .           .      .    .    */
          .    .    .           .          .    .           .      .    .    Nstep = 1;
          .    .    .           .          .    .           .      .    .    for(step = 1;step<=Nstep;step++){
         20    0    0           0          0    0           5      0    0      printf("timestep %d\n",step);
         20    0    0           5          5    0           5      0    0      printf("collisions %d\n",collisions);
          .    .    .           .          .    .           .      .    .      
          .    .    .           .          .    .           .      .    .      #pragma simd aligned linear(vis, mass)
     20,490    0    0           0          0    0           0      0    0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .           .      .    .        /* calculate distance from central mass */
          .    .    .           .          .    .           .      .    .        r = add_norm(Ndim, pos[i]);
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .        /* set the viscosity term in the force calculation */
          .    .    .           .          .    .           .      .    .        /* add the wind term in the force calculation */
      5,120    0    0       5,120      2,560    0           0      0    0        visc_wind_force(Ndim, f[i], vis[i], velo[i], wind);
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .        /* calculate central force */
          .    .    .           .          .    .           .      .    .        for(l=0; l<Ndim; l++) {
    143,365   12    3      35,845      2,565    0      15,360      0    0          f[i][l] -= force(G_mul_M_central*mass[i],pos[i][l],r);
          .    .    .           .          .    .           .      .    .        }
          .    .    .           .          .    .           .      .    .      }
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .      /*
          .    .    .           .          .    .           .      .    .      * add pairwise forces.
          .    .    .           .          .    .           .      .    .      */
          .    .    .           .          .    .           .      .    .      k = 0;
     61,455    0    0           0          0    0           0      0    0      for(i=0; i<Nbody; i++) {
    204,825    2    1           0          0    0      61,455     15    2        memset(tmp_f, 0, Ndim*sizeof(double));
          .    .    .           .          .    .           .      .    .        #pragma simd aligned private(delta_r, delta_pos, force_val, mass_square, radius_sum) reduction(+:tmp_f, collisions)
 32,061,355    8    4           0          0    0      40,960 18,025    0        for(j=i+1; j<Nbody; j++) {
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .          /* calculate pairwise separation of particles */
          .    .    .           .          .    .           .      .    .          for(l=0; l<Ndim; l++) {
178,559,850   14    5  84,101,025 15,539,532    1      61,425 17,935    0            delta_pos[l] = pos[i][l] - pos[j][l];
          .    .    .           .          .    .           .      .    .          }
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .          /* calculate norm of separation vector */
          .    .    .           .          .    .           .      .    .          delta_r = add_norm(Ndim, delta_pos);
          .    .    .           .          .    .           .      .    .  
 21,089,220    2    1  21,053,400  5,183,120    0           0      0    0          radius_sum = radius[i] + radius[j];
 21,145,505    3    2  21,089,225  5,220,111    0           0      0    0          mass_square = G*mass[i]*mass[j];
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .          /*  flip force if close in */
 83,886,060    0    0  10,495,980          5    1           0      0    0          if( delta_r >= radius_sum ) {
          .    .    .           .          .    .           .      .    .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .      .    .              force_val = force(mass_square,delta_pos[l],delta_r);
109,595,025    8    3  32,844,465    589,065    0  32,844,465      0    0              tmp_f[l] -= force_val;
346,260,240   11    5 125,839,320 15,539,149    0 125,982,540     10    2              f[j][l] += force_val;
          .    .    .           .          .    .           .      .    .            }
          .    .    .           .          .    .           .      .    .          }
          .    .    .           .          .    .           .      .    .          else {
          .    .    .           .          .    .           .      .    .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .      .    .              force_val = force(mass_square,delta_pos[l],delta_r);
          .    .    .           .          .    .           .      .    .              tmp_f[l] += force_val;
          .    .    .           .          .    .           .      .    .              f[j][l] -= force_val;
          .    .    .           .          .    .           .      .    .            }
    245,520    2    2     122,760          5    0      40,920 36,011    0            collisions++;
          .    .    .           .          .    .           .      .    .          }
          .    .    .           .          .    .           .      .    .          k = k + 1;
          .    .    .           .          .    .           .      .    .        }
          .    .    .           .          .    .           .      .    .        for(l=0; l<Ndim; l++)
    184,330    1    1     122,880     22,585    0      61,440      0    0          f[i][l] += tmp_f[l];
          .    .    .           .          .    .           .      .    .      }
          .    .    .           .          .    .           .      .    .  
          .    .    .           .          .    .           .      .    .      #pragma simd aligned linear(mass)
     20,505    2    2          15          0    0           0      0    0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .           .      .    .        for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .      .    .          /* update positions */
    179,205    3    3      61,445     15,360    0      15,360      0    0          pos[i][l] += + dt * velo[i][l];
          .    .    .           .          .    .           .      .    .          /* update velocities */
    138,240    3    2      35,840     10,240    0      15,360      0    0          velo[i][l] += + dt * (f[i][l]/mass[i]);
          .    .    .           .          .    .           .      .    .        }
          .    .    .           .          .    .           .      .    .      }
          .    .    .           .          .    .           .      .    .    }
         50    0    0          35         10    0           0      0    0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
67    5    3 74   99    0 69   52    8  percentage of events annotated

