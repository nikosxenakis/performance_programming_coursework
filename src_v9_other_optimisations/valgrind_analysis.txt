--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr   DLmr          Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
2,262,306,314 1,763 1,740 563,297,434 41,758,056 34,294 486,628,413 21,028,813 21,022,589  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr   DLmr          Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
1,678,643,290   39   38 461,752,335 41,711,572 18,044 419,512,345 20,976,640 20,970,496  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v9_other_optimisations/MD.c:evolve
  177,995,663  116  115  36,923,481         56     55  26,795,873     40,991     40,991  ???:__printf_fp
  125,921,280    0    0      61,440      7,680      0           0          0          0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v9_other_optimisations/util.h:evolve
   57,687,040    6    6  19,142,411          0      0   8,916,860          5          5  ???:hack_digit.13574
   43,119,322   90   85   9,853,458        123     99  10,016,744         55         47  ???:vfprintf
   41,614,180    9    9   6,128,335          0      0   4,132,970          5          5  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,294  9,291   2,584,580      4,611      4,611  ???:_IO_vfscanf
   19,693,216   17   17   5,266,053          0      0   4,857,844          0          0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4      4   1,380,234          3          3  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0      0   2,744,860         11         11  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    6   2,211,865          5      5     552,965          0          0  ???:read_int
    7,005,464    3    3     778,402          0      0     389,219      5,450      5,445  ???:__GI_mempcpy
    5,345,440    3    3   1,290,275          0      0     921,625          0          0  ???:_IO_padn
    4,711,833    2    2     409,727         16     11           0          0          0  ???:strchrnul
    4,233,264    7    7     650,954          2      2     364,873          1          1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0      0     921,630          5          5  ???:__mpn_extract_double
    3,796,909    3    3     506,255          0      0     253,128          0          0  ???:__mpn_lshift
    3,376,910    6    6     423,862          1      1     266,662          1          1  ???:__GI_memcpy
    3,119,755    7    7     550,545          0      0     367,030          0          0  ???:__mpn_rshift
    3,096,674    4    4     442,382          6      6           0          0          0  ???:__GI_strlen
    2,787,452    7    7     806,894          5      5     733,540          1          1  ???:__mpn_mul
    2,396,238    2    1     184,326          0      0           0          0          0  ???:isinf

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v9_other_optimisations/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr     Dr  D1mr DLmr Dw D1mw DLmw 

-- line 22 ----------------------------------------
         .    .    .      .     .    .  .    .    .    for(l=0; l<N; l++){
         .    .    .      .     .    .  .    .    .      f[l] = -vis * (velo[l] + wind[l]);
         .    .    .      .     .    .  .    .    .    }
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  inline void add_norm(int N,double * restrict r, double * restrict delta) {
         .    .    .      .     .    .  .    .    .    int k;
         .    .    .      .     .    .  .    .    .    for(k=0;k<N;k++){
42,014,720    0    0 61,440 7,680    0  0    0    0      *r += (delta[k] * delta[k]);
         .    .    .      .     .    .  .    .    .    }
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  inline double force(double W, double delta, double r) {
83,906,560    0    0      0     0    0  0    0    0    return W*delta/(pow(r,3.0));
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v9_other_optimisations/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr   DLmr          Dw       D1mw       DLmw 

-- line 2 ----------------------------------------
          .    .    .           .          .      .           .          .          .   *  Simple molecular dynamics code.
          .    .    .           .          .      .           .          .          .   *
          .    .    .           .          .      .           .          .          .   */
          .    .    .           .          .      .           .          .          .  #include <stdio.h>
          .    .    .           .          .      .           .          .          .  #include <math.h>
          .    .    .           .          .      .           .          .          .  #include "coord.h"
          .    .    .           .          .      .           .          .          .  #include "util.h"
          .    .    .           .          .      .           .          .          .  
         35    1    1           0          0      0          15          0          0  void evolve(int count,double dt) {
          .    .    .           .          .      .           .          .          .    int  step;
     20,480    0    0           0          0      0           0          0          0    int i,j,k,l;
          .    .    .           .          .      .           .          .          .    double radious_sum, force_val, mass_square;
          .    .    .           .          .      .           .          .          .    /*
          .    .    .           .          .      .           .          .          .    * Loop over timesteps.
          .    .    .           .          .      .           .          .          .    */
          .    .    .           .          .      .           .          .          .    count = 1;
          .    .    .           .          .      .           .          .          .    for(step = 1;step<=count;step++){
         20    0    0           0          0      0           5          0          0      printf("timestep %d\n",step);
         25    1    1           5          5      0           5          0          0      printf("collisions %d\n",collisions);
          .    .    .           .          .      .           .          .          .      
     81,930    0    0           0          0      0           0          0          0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .        /* calculate distance from central mass */
          .    .    .           .          .      .           .          .          .        r[i] = 0.0;
          .    .    .           .          .      .           .          .          .        add_norm(Ndim,&r[i],pos[i]);
     81,920    1    1           0          0      0      20,480      2,560      2,560        r[i] = sqrt(r[i]);
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .        /* set the viscosity term in the force calculation */
          .    .    .           .          .      .           .          .          .        /* add the wind term in the force calculation */
     20,495    0    0      20,495      2,565      4           0          0          0        visc_wind_force(Ndim, f[i], vis[i], velo[i], wind);
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .        /* calculate central force */
          .    .    .           .          .      .           .          .          .        for(l=0; l<Ndim; l++) {
    266,245    2    2     143,365     10,240      0      61,440      7,680      1,536          f[i][l] -= force(G*mass[i]*M_central,pos[i][l],r[i]);
          .    .    .           .          .      .           .          .          .        }
          .    .    .           .          .      .           .          .          .      }
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .      /*
          .    .    .           .          .      .           .          .          .      * add pairwise forces.
          .    .    .           .          .      .           .          .          .      */
         10    0    0           0          0      0           0          0          0      k = 0;
     40,965    0    0           0          0      0           0          0          0      for(i=0; i<Nbody; i++) {
167,915,490    3    3           0          0      0           0          0          0        for(j=i+1; j<Nbody; j++) {
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .          /* calculate pairwise separation of particles */
          .    .    .           .          .      .           .          .          .          for(l=0; l<Ndim; l++) {
251,719,650    6    6 125,859,825 15,621,689      0 125,798,400 15,724,800 15,724,800            delta_pos[k][l] = pos[i][l] - pos[j][l];
          .    .    .           .          .      .           .          .          .          }
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .          /* calculate norm of separation vector */
          .    .    .           .          .      .           .          .          .          delta_r[k] = 0.0;
          .    .    .           .          .      .           .          .          .          add_norm(Ndim, &delta_r[k], delta_pos[k]);
167,731,200    0    0           0          0      0  41,932,800  5,241,600  5,241,600          delta_r[k] = sqrt(delta_r[k]);
          .    .    .           .          .      .           .          .          .  
 83,886,075    0    0  41,953,275  5,215,248      0           0          0          0          radious_sum = radius[i] + radius[j];
 41,973,750    0    0  41,973,750  5,233,431      0           0          0          0          mass_square = G*mass[i]*mass[j];
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .          /*  flip force if close in */
 83,865,600    5    5           0          0      0           0          0          0          if( delta_r[k] >= radious_sum ) {
          .    .    .           .          .      .           .          .          .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .      .           .          .          .              force_val = force(mass_square,delta_pos[k][l],delta_r[k]);
377,395,200    6    6 125,798,400      2,335      0 125,798,400          0          0              f[i][l] -= force_val;
419,328,000    0    0 125,798,400 15,600,454      0 125,798,400          0          0              f[j][l] += force_val;
          .    .    .           .          .      .           .          .          .            }
          .    .    .           .          .      .           .          .          .          }
          .    .    .           .          .      .           .          .          .          else {
          .    .    .           .          .      .           .          .          .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .      .           .          .          .              force_val = force(mass_square,delta_pos[k][l],delta_r[k]);
          .    .    .           .          .      .           .          .          .              f[i][l] += force_val;
          .    .    .           .          .      .           .          .          .              f[j][l] -= force_val;
          .    .    .           .          .      .           .          .          .            }
          .    .    .           .          .      .           .          .          .            collisions++;
          .    .    .           .          .      .           .          .          .          }
 83,865,600    2    1           0          0      0           0          0          0          k = k + 1;
          .    .    .           .          .      .           .          .          .        }
          .    .    .           .          .      .           .          .          .      }
          .    .    .           .          .      .           .          .          .  
          .    .    .           .          .      .           .          .          .      
     81,930    2    2           0          0      0           0          0          0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .      .           .          .          .        for(l=0; l<Ndim; l++) {
          .    .    .           .          .      .           .          .          .          /* update positions */
    204,805    5    5     122,885     15,360 12,125      61,440          0          0          pos[i][l] += + dt * velo[i][l];
          .    .    .           .          .      .           .          .          .          /* update velocities */
    163,840    5    5      81,920     10,240  5,910      40,960          0          0          velo[i][l] += + dt * (f[i][l]/mass[i]);
          .    .    .           .          .      .           .          .          .        }
          .    .    .           .          .      .           .          .          .      }
          .    .    .           .          .      .           .          .          .    }
         25    0    0          15          5      5           0          0          0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
80    2    2 82  100   53 86  100  100  percentage of events annotated

