--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
3,006,818,200 1,912 1,887 668,047,756 93,972,339 52,466,660 811,712,272 21,053,071 21,023,154  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
1,751,873,625   65   65 409,218,555 62,435,374 21,000,720 408,906,280 15,748,490 15,724,817  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v3_data_structures_i/MD.c:evolve
  461,580,865   25   25 157,340,170 31,494,260 31,449,630      61,440      7,685      1,536  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v3_data_structures_i/util.c:evolve
  335,626,570   14   14          20         20         14 335,626,240  5,244,170  5,244,170  ???:__intel_avx_rep_memset
  177,995,637  121  119  36,923,473         56         55  26,795,873     40,991     40,991  ???:__printf_fp
   57,687,055    6    6  19,142,417          0          0   8,916,866          5          5  ???:hack_digit.13574
   43,119,322   94   89   9,853,458        123         99  10,016,744         55         47  ???:vfprintf
   41,614,180   11   10   6,128,335          0          0   4,132,970          5          5  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,293      9,290   2,584,580      4,620      4,616  ???:_IO_vfscanf
   19,693,237   21   21   5,266,056          0          0   4,857,847          0          0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4          4   1,380,234          3          3  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0          0   2,744,860         11         11  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    6   2,211,865          0          0     552,965          0          0  ???:read_int
    7,005,464    3    3     778,402          0          0     389,219      5,450      5,445  ???:__GI_mempcpy
    5,345,440    3    3   1,290,275          0          0     921,625          0          0  ???:_IO_padn
    4,711,833    2    2     409,727         17         12           0          0          0  ???:strchrnul
    4,233,264    7    7     650,954          2          2     364,873          1          1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0          0     921,630          5          5  ???:__mpn_extract_double
    3,796,909    4    4     506,255          0          0     253,128          0          0  ???:__mpn_lshift
    3,376,910    6    6     423,862          1          1     266,662          1          1  ???:__GI_memcpy
    3,119,755    7    7     550,545          0          0     367,030          0          0  ???:__mpn_rshift
    3,096,674    6    5     442,382          6          6           0          0          0  ???:__GI_strlen

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v3_data_structures_i/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 

-- line 10 ----------------------------------------
          .    .    .           .          .          .           .          .          .  void add_norm(int N,double *r, double *delta);
          .    .    .           .          .          .           .          .          .  double force(double W, double delta, double r);
          .    .    .           .          .          .           .          .          .  void wind_force(int N,double *f, double *vis, double vel);
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
         35    1    1           0          0          0          15          0          0  void evolve(int count,double dt){
          .    .    .           .          .          .           .          .          .  int  step;
          .    .    .           .          .          .           .          .          .  int i,j,k,l;
          .    .    .           .          .          .           .          .          .  int collided;
          .    .    .           .          .          .           .          .          .  double Size;
          .    .    .           .          .          .           .          .          .  /*
          .    .    .           .          .          .           .          .          .   * Loop over timesteps.
          .    .    .           .          .          .           .          .          .   */
          .    .    .           .          .          .           .          .          .  count = 1;
          .    .    .           .          .          .           .          .          .        for(step = 1;step<=count;step++){
         20    1    1           0          0          0           5          0          0          printf("timestep %d\n",step);
         25    0    0           5          5          0           5          0          0          printf("collisions %d\n",collisions);
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  /* set the viscosity term in the force calculation */
         70    0    0           0          0          0           0          0          0          for(j=0;j<Ndim;j++){
     15,360    1    1      15,360      7,695          0           0          0          0            visc_force(Nbody,f[j],vis,velo[j]);
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  /* add the wind term in the force calculation */
          .    .    .           .          .          .           .          .          .          for(j=0;j<Ndim;j++){
     25,620    6    6      25,610      5,135          0           0          0          0            wind_force(Nbody,f[j],vis,wind[j]);
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  /* calculate distance from central mass */
          .    .    .           .          .          .           .          .          .          for(k=0;k<Nbody;k++){
         25    1    1           0          0          0           5          5          0            r[k] = 0.0;
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .          for(i=0;i<Ndim;i++){
     20,480    7    7      10,240      5,015          0      10,240          0          0  	  add_norm(Nbody,r,pos[i]);
          .    .    .           .          .          .           .          .          .          }
      3,850    1    1           0          0          0           0          0          0          for(k=0;k<Nbody;k++){
     10,240    2    2       5,120      2,370          0       5,120          0          0            r[k] = sqrt(r[k]);
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .         /* calculate central force */
     11,535    2    2           0          0          0           0          0          0          for(i=0;i<Nbody;i++){
         70    0    0           0          0          0           0          0          0  	  for(l=0;l<Ndim;l++){
     15,360    1    1           0          0          0      15,360          0          0                  f[l][i] = f[l][i] - 
     61,445    1    1      61,445     30,650          0           0          0          0                     force(G*mass[i]*M_central,pos[l][i],r[i]);
          .    .    .           .          .          .           .          .          .  	  }
          .    .    .           .          .          .           .          .          .  	}
          .    .    .           .          .          .           .          .          .  /* calculate pairwise separation of particles */
          5    0    0           0          0          0           0          0          0          k = 0;
     40,975    2    2           0          0          0           0          0          0          for(i=0;i<Nbody;i++){
 84,254,635    5    5           0          0          0           0          0          0            for(j=i+1;j<Nbody;j++){
     20,470    0    0           0          0          0           0          0          0              for(l=0;l<Ndim;l++){
251,729,880    6    6 125,890,530 15,375,000          0 125,798,400 15,724,815 15,724,807                delta_pos[l][k] = pos[l][i] - pos[l][j];
          .    .    .           .          .          .           .          .          .              }
 20,971,520    0    0           0          0          0           0          0          0              k = k + 1;
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  /* calculate norm of separation vector */
          .    .    .           .          .          .           .          .          .          for(k=0;k<Npair;k++){
         25    0    0           0          0          0           5          5          5            delta_r[k] = 0.0;
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .          for(i=0;i<Ndim;i++){
 41,932,810    1    1  20,966,400 10,483,210 10,483,210  20,966,400          0          0  	  add_norm(Npair,delta_r,delta_pos[i]);
          .    .    .           .          .          .           .          .          .          }
 31,449,605    0    0           0          0          0           0          0          0          for(k=0;k<Npair;k++){
 20,966,400    0    0  10,483,200  5,241,605  5,241,605  10,483,200          0          0            delta_r[k] = sqrt(delta_r[k]);
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  /*
          .    .    .           .          .          .           .          .          .   * add pairwise forces.
          .    .    .           .          .          .           .          .          .   */
          5    0    0           0          0          0           0          0          0          k = 0;
     40,985    1    1           5          5          5           5          5          5          for(i=0;i<Nbody;i++){
125,962,235    1    1           0          0          0           0          0          0            for(j=i+1;j<Nbody;j++){
 83,886,075    0    0  41,953,275  5,212,716      2,565           0          0          0              Size = radius[i] + radius[j];
 41,932,800    0    0           0          0          0           0          0          0              collided=0;
          .    .    .           .          .          .           .          .          .              for(l=0;l<Ndim;l++){
          .    .    .           .          .          .           .          .          .  /*  flip force if close in */
209,664,000    0    0  41,932,800  5,241,605  5,241,605           0          0          0                if( delta_r[k] >= Size ){
167,792,625    1    1      61,425      6,850         15 125,798,400     23,660          0                  f[l][i] = f[l][i] - 
125,818,880    3    3  41,953,280  5,212,615      2,570           0          0          0                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
293,529,600    0    0  41,932,800  5,193,346      2,555 125,798,400          0          0                  f[l][j] = f[l][j] + 
 83,865,600    1    1  83,865,600 10,386,792      5,115           0          0          0                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .          .          .           .          .          .                }else{
          .    .    .           .          .          .           .          .          .                  f[l][i] = f[l][i] + 
          .    .    .           .          .          .           .          .          .                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .          .          .           .          .          .                  f[l][j] = f[l][j] - 
          .    .    .           .          .          .           .          .          .                     force(G*mass[i]*mass[j],delta_pos[l][k],delta_r[k]);
          .    .    .           .          .          .           .          .          .  		collided=1;
          .    .    .           .          .          .           .          .          .                }
          .    .    .           .          .          .           .          .          .              }
125,798,400    0    0           0          0          0           0          0          0  	    if( collided == 1 ){
          .    .    .           .          .          .           .          .          .  	      collisions++;
          .    .    .           .          .          .           .          .          .  	    }
 41,932,800    0    0           0          0          0           0          0          0              k = k + 1;
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  /* update positions */
     11,535    0    0           0          0          0           0          0          0          for(i=0;i<Nbody;i++){
         70    0    0           0          0          0           0          0          0            for(j=0;j<Ndim;j++){
     61,445   15   15      30,725     15,375     15,375      15,360          0          0              pos[j][i] = pos[j][i] + dt * velo[j][i];
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  /* update velocities */
          .    .    .           .          .          .           .          .          .          for(i=0;i<Nbody;i++){
          .    .    .           .          .          .           .          .          .            for(j=0;j<Ndim;j++){
     46,080    5    5      30,720     15,380      6,100      15,360          0          0              velo[j][i] = velo[j][i] + dt * (f[j][i]/mass[i]);
          .    .    .           .          .          .           .          .          .            }
          .    .    .           .          .          .           .          .          .          }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .        }
          .    .    .           .          .          .           .          .          .  
         30    0    0          15          5          0           0          0          0  }
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  
          .    .    .           .          .          .           .          .          .  

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v3_data_structures_i/util.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr       DLmr     Dw  D1mw  DLmw 

          .    .    .           .          .          .      .     .     .  #include <math.h>
          .    .    .           .          .          .      .     .     .  
          .    .    .           .          .          .      .     .     .  void visc_force(int N,double *f, double *vis, double *velo)
          .    .    .           .          .          .      .     .     .  {
          .    .    .           .          .          .      .     .     .    int i;
     11,535    1    1           0          0          0      0     0     0            for(i=0;i<N;i++){
     46,080    1    1      30,720      7,690          5 15,360 7,685 1,536              f[i] = -vis[i] * velo[i];
          .    .    .           .          .          .      .     .     .            }
          .    .    .           .          .          .      .     .     .  }
          5    0    0           5          5          0      0     0     0  void wind_force(int N,double *f, double *vis, double velo)
          .    .    .           .          .          .      .     .     .  {
          .    .    .           .          .          .      .     .     .    int i;
     34,580    0    0           0          0          0      0     0     0            for(i=0;i<N;i++){
    143,360   10   10      46,080      7,690          0 46,080     0     0              f[i] = f[i] -vis[i] * velo;
          .    .    .           .          .          .      .     .     .            }
          .    .    .           .          .          .      .     .     .  }
          .    .    .           .          .          .      .     .     .  void add_norm(int N,double *r, double *delta)
          .    .    .           .          .          .      .     .     .  {
          .    .    .           .          .          .      .     .     .    int k;
 62,906,900    0    0           0          0          0      0     0     0          for(k=0;k<N;k++){
 62,929,920   10   10  31,464,960 15,732,500 15,724,810      0     0     0            r[k] += (delta[k] * delta[k]);
          .    .    .           .          .          .      .     .     .          }
          .    .    .           .          .          .      .     .     .  }
          .    .    .           .          .          .      .     .     .  
          .    .    .           .          .          .      .     .     .  double force(double W, double delta, double r){
335,508,485    3    3 125,798,405 15,746,375 15,724,815      0     0     0    return W*delta/(pow(r,3.0));
          .    .    .           .          .          .      .     .     .  }
          .    .    .           .          .          .      .     .     .  
          .    .    .           .          .          .      .     .     .  
          .    .    .           .          .          .      .     .     .  

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
74    5    5 85  100  100 50   75   75  percentage of events annotated

