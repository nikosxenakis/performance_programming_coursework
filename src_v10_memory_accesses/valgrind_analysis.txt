--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr   DLmr          Dw   D1mw   DLmw 
--------------------------------------------------------------------------------
2,010,586,642 1,764 1,418 563,276,966 41,307,869 11,517 318,876,726 59,851 16,296  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr  DLmr          Dw   D1mw  DLmw  file:function
--------------------------------------------------------------------------------
1,426,923,660   37   13 461,731,865 41,261,383     0 251,760,665  7,680 1,536  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v10_memory_accesses/MD.c:evolve
  177,995,664  116   99  36,923,482         56     3  26,795,873 40,991 8,194  ???:__printf_fp
  125,921,280    1    1      61,440      7,680     0           0      0     0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v10_memory_accesses/util.h:evolve
   57,687,040    6    6  19,142,411          0     0   8,916,860      5     0  ???:hack_digit.13574
   43,119,322   90   63   9,853,458        123     8  10,016,744     55     2  ???:vfprintf
   41,614,180    9    5   6,128,335          0     0   4,132,970      5     1  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,294 9,291   2,584,580  4,611 4,611  ???:_IO_vfscanf
   19,693,213   17    5   5,266,053          0     0   4,857,844      0     0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4     4   1,380,234      3     3  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0     0   2,744,860     11     1  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    2   2,211,865          5     0     552,965      0     0  ???:read_int
    7,005,464    3    3     778,402          0     0     389,219  5,450 1,087  ???:__GI_mempcpy
    5,345,440    3    3   1,290,275          0     0     921,625      0     0  ???:_IO_padn
    4,711,833    2    2     409,727         16     2           0      0     0  ???:strchrnul
    4,233,264    7    7     650,954          2     2     364,873      1     1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0     0     921,630      5     0  ???:__mpn_extract_double
    3,796,909    4    3     506,255          0     0     253,128      0     0  ???:__mpn_lshift
    3,376,910    6    3     423,862          1     1     266,662      1     1  ???:__GI_memcpy
    3,119,755    7    3     550,545          0     0     367,030      0     0  ???:__mpn_rshift
    3,096,674    4    4     442,382          6     1           0      0     0  ???:__GI_strlen
    2,787,452    7    4     806,894          5     0     733,540      1     1  ???:__mpn_mul
    2,396,238    2    1     184,326          0     0           0      0     0  ???:isinf

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v10_memory_accesses/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr DLmr          Dw  D1mw  DLmw 

-- line 2 ----------------------------------------
          .    .    .           .          .    .           .     .     .   *  Simple molecular dynamics code.
          .    .    .           .          .    .           .     .     .   *
          .    .    .           .          .    .           .     .     .   */
          .    .    .           .          .    .           .     .     .  #include <stdio.h>
          .    .    .           .          .    .           .     .     .  #include <math.h>
          .    .    .           .          .    .           .     .     .  #include "coord.h"
          .    .    .           .          .    .           .     .     .  #include "util.h"
          .    .    .           .          .    .           .     .     .  
         35    1    1           0          0    0          15     0     0  void evolve(int count,double dt) {
          .    .    .           .          .    .           .     .     .    int  step;
     81,920    0    0           0          0    0           0     0     0    int i,j,k,l;
          .    .    .           .          .    .           .     .     .    double radious_sum, force_val, mass_square, r, delta_r, delta_pos[Ndim];
          .    .    .           .          .    .           .     .     .    /*
          .    .    .           .          .    .           .     .     .    * Loop over timesteps.
          .    .    .           .          .    .           .     .     .    */
          .    .    .           .          .    .           .     .     .    count = 1;
          .    .    .           .          .    .           .     .     .    for(step = 1;step<=count;step++){
         20    0    0           0          0    0           5     0     0      printf("timestep %d\n",step);
         25    1    1           5          5    0           5     0     0      printf("collisions %d\n",collisions);
          .    .    .           .          .    .           .     .     .      
     81,930    0    0           0          0    0           0     0     0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .        /* calculate distance from central mass */
          .    .    .           .          .    .           .     .     .        r = 0.0;
          .    .    .           .          .    .           .     .     .        add_norm(Ndim,&r,pos[i]);
     61,440    1    1           0          0    0           0     0     0        r = sqrt(r);
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .        /* set the viscosity term in the force calculation */
          .    .    .           .          .    .           .     .     .        /* add the wind term in the force calculation */
     20,495    0    0      20,495      2,565    0           0     0     0        visc_wind_force(Ndim, f[i], vis[i], velo[i], wind);
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .        /* calculate central force */
          .    .    .           .          .    .           .     .     .        for(l=0; l<Ndim; l++) {
    266,245    1    1     143,365     10,240    0      61,440 7,680 1,536          f[i][l] -= force(G_mul_M_central*mass[i],pos[i][l],r);
          .    .    .           .          .    .           .     .     .        }
          .    .    .           .          .    .           .     .     .      }
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .      /*
          .    .    .           .          .    .           .     .     .      * add pairwise forces.
          .    .    .           .          .    .           .     .     .      */
          .    .    .           .          .    .           .     .     .      k = 0;
     40,980    0    0           0          0    0           0     0     0      for(i=0; i<Nbody; i++) {
167,833,590    5    3           0          0    0           0     0     0        for(j=i+1; j<Nbody; j++) {
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .          /* calculate pairwise separation of particles */
          .    .    .           .          .    .           .     .     .          for(l=0; l<Ndim; l++) {
125,859,825    1    1 125,859,825 15,461,329    0           0     0     0            delta_pos[l] = pos[i][l] - pos[j][l];
          .    .    .           .          .    .           .     .     .          }
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .          /* calculate norm of separation vector */
          .    .    .           .          .    .           .     .     .          delta_r = 0.0;
          .    .    .           .          .    .           .     .     .          add_norm(Ndim, &delta_r, delta_pos);
125,798,400    5    1           0          0    0           0     0     0          delta_r = sqrt(delta_r);
          .    .    .           .          .    .           .     .     .  
 83,886,075    0    0  41,953,275  5,158,137    0           0     0     0          radious_sum = radius[i] + radius[j];
 41,953,280    0    0  41,953,280  5,157,854    0           0     0     0          mass_square = G*mass[i]*mass[j];
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .          /*  flip force if close in */
 83,865,600    0    0           0          0    0           0     0     0          if( delta_r >= radious_sum ) {
          .    .    .           .          .    .           .     .     .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .     .     .              force_val = force(mass_square,delta_pos[l],delta_r);
377,395,200    0    0 125,798,400      2,240    0 125,798,400     0     0              f[i][l] -= force_val;
419,328,000   10    2 125,798,400 15,443,403    0 125,798,400     0     0              f[j][l] += force_val;
          .    .    .           .          .    .           .     .     .            }
          .    .    .           .          .    .           .     .     .          }
          .    .    .           .          .    .           .     .     .          else {
          .    .    .           .          .    .           .     .     .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .     .     .              force_val = force(mass_square,delta_pos[l],delta_r);
          .    .    .           .          .    .           .     .     .              f[i][l] += force_val;
          .    .    .           .          .    .           .     .     .              f[j][l] -= force_val;
          .    .    .           .          .    .           .     .     .            }
          .    .    .           .          .    .           .     .     .            collisions++;
          .    .    .           .          .    .           .     .     .          }
          .    .    .           .          .    .           .     .     .          k = k + 1;
          .    .    .           .          .    .           .     .     .        }
          .    .    .           .          .    .           .     .     .      }
          .    .    .           .          .    .           .     .     .  
          .    .    .           .          .    .           .     .     .      
     81,930    5    0           0          0    0           0     0     0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .           .     .     .        for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .           .     .     .          /* update positions */
    204,805    5    1     122,885     15,365    0      61,440     0     0          pos[i][l] += + dt * velo[i][l];
          .    .    .           .          .    .           .     .     .          /* update velocities */
    163,840    2    1      81,920     10,240    0      40,960     0     0          velo[i][l] += + dt * (f[i][l]/mass[i]);
          .    .    .           .          .    .           .     .     .        }
          .    .    .           .          .    .           .     .     .      }
          .    .    .           .          .    .           .     .     .    }
         25    0    0          15          5    0           0     0     0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_v10_memory_accesses/util.h
--------------------------------------------------------------------------------
        Ir I1mr ILmr     Dr  D1mr DLmr Dw D1mw DLmw 

-- line 22 ----------------------------------------
         .    .    .      .     .    .  .    .    .    for(l=0; l<N; l++){
         .    .    .      .     .    .  .    .    .      f[l] = -vis * (velo[l] + wind[l]);
         .    .    .      .     .    .  .    .    .    }
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  inline void add_norm(int N,double * restrict r, double * restrict delta) {
         .    .    .      .     .    .  .    .    .    int k;
         .    .    .      .     .    .  .    .    .    for(k=0;k<N;k++){
42,014,720    1    1 61,440 7,680    0  0    0    0      *r += (delta[k] * delta[k]);
         .    .    .      .     .    .  .    .    .    }
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  inline double force(double W, double delta, double r) {
83,906,560    0    0      0     0    0  0    0    0    return W*delta/(pow(r,3.0));
         .    .    .      .     .    .  .    .    .  }
         .    .    .      .     .    .  .    .    .  
         .    .    .      .     .    .  .    .    .  #endif

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
77    2    1 82  100    0 79   13    9  percentage of events annotated

