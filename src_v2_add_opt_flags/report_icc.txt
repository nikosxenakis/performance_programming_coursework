Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -g -Wall -Winline -pg -restrict -g -O0 -ipo -xBROADWELL -qopt-report-file=report_icc.txt -qopt-report=5 -o MD -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/7=14.3%] control.c(14,33)
  -> EXTERN: (28,11) atoi(const char *)
  -> EXTERN: (34,7) calloc(size_t, size_t)
  -> EXTERN: (35,13) calloc(size_t, size_t)
  -> EXTERN: (36,10) calloc(size_t, size_t)
  -> EXTERN: (37,12) calloc(size_t, size_t)
  -> EXTERN: (38,9) calloc(size_t, size_t)
  -> EXTERN: (39,10) calloc(size_t, size_t)
  -> EXTERN: (40,12) calloc(size_t, size_t)
  -> EXTERN: (41,13) calloc(size_t, size_t)
  -> EXTERN: (42,18) calloc(size_t, size_t)
  -> EXTERN: (53,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (56,5) perror(const char *)
  -> EXTERN: (57,5) exit(int)
  -> EXTERN: (61,5) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (66,3) fclose(FILE *)
  -> (72,11) second() (isz = 10) (sz = 15)
     [[ Unable to inline callsite  <1>]]
  -> (74,13) second() (isz = 10) (sz = 15)
     [[ Unable to inline callsite  <1>]]
  -> (76,7) evolve(int, double) (isz = 430) (sz = 437)
     [[ Unable to inline callsite  <1>]]
  -> (77,12) second() (isz = 10) (sz = 15)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (78,7) printf(const char *__restrict__, ...)
  -> EXTERN: (79,7) printf(const char *__restrict__, ...)
  -> EXTERN: (82,7) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (83,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (86,2) perror(const char *)
  -> EXTERN: (87,2) exit(int)
  -> EXTERN: (91,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (96,7) fclose(FILE *)
  -> (98,9) second() (isz = 10) (sz = 15)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (99,3) printf(const char *__restrict__, ...)

===========================================================================

Begin optimization report for: second()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (second()) [2/7=28.6%] control.c(104,1)
  -> EXTERN: (115,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)

===========================================================================

Begin optimization report for: evolve(int, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve(int, double)) [3/7=42.9%] MD.c(18,33)
  -> EXTERN: (28,9) printf(const char *__restrict__, ...)
  -> EXTERN: (29,9) printf(const char *__restrict__, ...)
  -> (33,11) visc_force() (isz = 14) (sz = 25)
     [[ Unable to inline callsite  <1>]]
  -> (37,11) wind_force(int, double *, double *, double) (isz = 14) (sz = 25)
     [[ Unable to inline callsite  <1>]]
  -> (44,4) add_norm(int, double *, double *) (isz = 18) (sz = 27)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (47,18) sqrt(double)
  -> (53,20) force(double, double, double) (isz = 2) (sz = 13)
     [[ Unable to inline callsite  <1>]]
  -> (72,4) add_norm(int, double *, double *) (isz = 18) (sz = 27)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (75,24) sqrt(double)
  -> (90,20) force(double, double, double) (isz = 2) (sz = 13)
     [[ Unable to inline callsite  <1>]]
  -> (92,20) force(double, double, double) (isz = 2) (sz = 13)
     [[ Unable to inline callsite  <1>]]
  -> (95,20) force(double, double, double) (isz = 2) (sz = 13)
     [[ Unable to inline callsite  <1>]]
  -> (97,20) force(double, double, double) (isz = 2) (sz = 13)
     [[ Unable to inline callsite  <1>]]

===========================================================================

Begin optimization report for: force(double, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (force(double, double, double)) [4/7=57.1%] util.c(25,47)
  -> EXTERN: (26,19) pow(double, double)

===========================================================================

Begin optimization report for: add_norm(int, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (add_norm(int, double *, double *)) [5/7=71.4%] util.c(18,1)

===========================================================================

Begin optimization report for: wind_force(int, double *, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (wind_force(int, double *, double *, double)) [6/7=85.7%] util.c(11,1)

===========================================================================

Begin optimization report for: visc_force()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (visc_force()) [7/7=100.0%] util.c(4,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback does not have training profile data or a static estimate profile for the following routines:

  File: MD.c
        evolve(int, double)(18)

  File: control.c
        main(int, char **)(14)
        second()(104)

  File: util.c
        visc_force()(4)
        wind_force(int, double *, double *, double)(11)
        add_norm(int, double *, double *)(18)
        force(double, double, double)(25)


  0 out of 7 routine(s) used training profile data for PGO feedback
  0 out of 7 routine(s) were unable to use training profile data for PGO feedback
  0 out of 7 routine(s) were unable to find training profile data for PGO feedback
  7 out of 7 routine(s) did not have training profile data or a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

