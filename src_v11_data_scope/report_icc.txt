Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -g -Wall -Winline -pg -restrict -qopenmp-simd -Ofast -ipo -xBROADWELL -qopt-report-file=report_icc.txt -qopt-report=5 -o MD -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/7=14.3%] control.c(14,33)
  -> INLINE (MANUAL): (28,11) atoi(const char *) (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (37,60) ?1memcpy
  -> EXTERN: (42,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (45,5) perror(const char *)
  -> EXTERN: (46,5) exit(int)
  -> EXTERN: (50,5) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (55,3) fclose(FILE *)
  -> INLINE: (61,11) second() (isz = 10) (sz = 15)
    -> EXTERN: (104,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (63,13) second() (isz = 10) (sz = 15)
    -> EXTERN: (104,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (65,7) evolve(int, double, double (*)[3], double (*)[3], double (*)[3], const double *__restrict__, const double *__restrict__, const double *__restrict__, double *__restrict__) (isz = 283) (sz = 304)
     [[ Inlining would exceed -inline-max-size value (304>230) <1>]]
  -> INLINE: (66,12) second() (isz = 10) (sz = 15)
    -> EXTERN: (104,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (67,7) printf(const char *__restrict__, ...)
  -> EXTERN: (68,7) printf(const char *__restrict__, ...)
  -> EXTERN: (71,7) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (72,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (75,2) perror(const char *)
  -> EXTERN: (76,2) exit(int)
  -> EXTERN: (80,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (85,7) fclose(FILE *)
  -> INLINE: (87,9) second() (isz = 10) (sz = 15)
    -> EXTERN: (104,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (88,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(49,3)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(50,5) ]
LOOP END

LOOP BEGIN at control.c(62,4)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ control.c(76,2) ]

   LOOP BEGIN at control.c(79,7)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(80,2) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

control.c(37,60):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
control.c(14,33):remark #34051: REGISTER ALLOCATION : [main] control.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     157
            Global    :      47
            Local     :     110
        Regenerable   :      67
        Spilled       :      10
        
    Routine stack
        Variables     :   395468 bytes*
            Reads     :      19 [8.41e+04 ~ 27.8%]
            Writes    :       8 [2.00e+01 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       6 [1.05e+01 ~ 0.0%]
            Writes    :       6 [1.11e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve(int, double, double (*)[3], double (*)[3], double (*)[3], const double *__restrict__, const double *__restrict__, const double *__restrict__, double *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve(int, double, double (*)[3], double (*)[3], double (*)[3], const double *__restrict__, const double *__restrict__, const double *__restrict__, double *__restrict__)) [2/7=28.6%] MD.c(11,89)
  -> EXTERN: (21,5) printf(const char *__restrict__, ...)
  -> EXTERN: (22,5) printf(const char *__restrict__, ...)
  -> INLINE (MANUAL): (28,7) add_norm(int, double *__restrict__, double *__restrict__) (isz = 17) (sz = 26)
  -> INLINE (MANUAL): (33,7) visc_wind_force(int, double *__restrict__, double, double *__restrict__, double *__restrict__) (isz = 17) (sz = 30)
  -> INLINE (MANUAL): (37,20) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.h:(35,19) pow(double, double)
  -> INLINE (MANUAL): (55,9) add_norm(int, double *__restrict__, double *__restrict__) (isz = 17) (sz = 26)
  -> INLINE (MANUAL): (64,25) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.h:(35,19) pow(double, double)
  -> INLINE (MANUAL): (71,25) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.h:(35,19) pow(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(20,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(24,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between f[i][l] (23:5) and f[i][l] (37:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between f[i][l] (37:9) and f[i][l] (23:5)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3

      LOOP BEGIN at util.h(29,3) inlined into MD.c(28,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END

      LOOP BEGIN at util.h(22,3) inlined into MD.c(33,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END

      LOOP BEGIN at MD.c(36,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(45,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between delta_pos[l] (46:7) and delta_pos[l] (46:7)
      remark #15346: vector dependence: assumed FLOW dependence between delta_pos[l] (46:7) and delta_pos[l] (46:7)

      LOOP BEGIN at MD.c(46,7)
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 12
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between f[i][l] (65:13) and f[i][l] (72:13)
         remark #15346: vector dependence: assumed OUTPUT dependence between f[i][l] (72:13) and f[i][l] (65:13)

         LOOP BEGIN at MD.c(49,9)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at util.h(29,3) inlined into MD.c(55,9)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at MD.c(63,11)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at MD.c(70,11)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(82,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(83,7)
      <Distributed chunk2>
         remark #15389: vectorization support: reference velo[i][l] has unaligned access   [ MD.c(87,9) ]
         remark #15389: vectorization support: reference velo[i][l] has unaligned access   [ MD.c(87,9) ]
         remark #15389: vectorization support: reference f[i][l] has unaligned access   [ MD.c(87,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.909
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 37 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.910 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at MD.c(83,7)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #15389: vectorization support: reference pos[i][l] has unaligned access   [ MD.c(85,9) ]
         remark #15389: vectorization support: reference pos[i][l] has unaligned access   [ MD.c(85,9) ]
         remark #15389: vectorization support: reference velo[i][l] has unaligned access   [ MD.c(85,29) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.818
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 0.850 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at MD.c(83,7)
      <Remainder loop for vectorization, Distributed chunk2>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(11,89):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     132
            Global    :      51
            Local     :      81
        Regenerable   :      15
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      16 [5.58e+04 ~ 1.0%]
            Writes    :      12 [1.85e+04 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: second()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second()) control.c(93,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: MD.c
        evolve(int, double, double (*)[3], double (*)[3], double (*)[3], const double *__restrict__, const double *__restrict__, const double *__restrict__, double *__restrict__)(11)

  File: control.c
        main(int, char **)(14)


  0 out of 2 routine(s) used training profile data for PGO feedback
  0 out of 2 routine(s) were unable to use training profile data for PGO feedback
  0 out of 2 routine(s) were unable to find training profile data for PGO feedback
  2 out of 2 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

