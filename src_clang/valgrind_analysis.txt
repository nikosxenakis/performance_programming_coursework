--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD
Data file:        cachegrind_output.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr       D1mr   DLmr          Dw   D1mw   DLmw 
--------------------------------------------------------------------------------
1,843,028,080 1,739 1,413 437,165,688 41,187,748 11,394 151,084,232 59,692 16,058  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr  DLmr         Dw   D1mw  DLmw  file:function
--------------------------------------------------------------------------------
1,007,601,065   27   24 335,651,915 41,134,506     0 83,952,700      0     0  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_clang/MD.c:evolve
  377,728,010   24    8      35,850     15,365     0     15,360  7,679 1,448  /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_clang/./util.h:evolve
  177,995,675  114   99  36,923,485         56     3 26,795,873 40,991 8,193  ???:__printf_fp
   57,687,055    6    6  19,142,417          0     0  8,916,866      5     0  ???:hack_digit.13574
   43,119,322   85   63   9,853,458        123     8 10,016,744     55     7  ???:vfprintf
   41,614,180   10    5   6,128,335          0     0  4,132,970      5     0  ???:__mpn_mul_1
   26,100,773   68   68   7,720,964      9,294 9,291  2,584,580  4,611 4,611  ???:_IO_vfscanf
   19,693,232    9    5   5,266,055          0     0  4,857,846      0     0  ???:__mpn_divrem
   18,740,564   53   53   2,628,836          4     4  1,380,234      4     4  ???:____strtod_l_internal
   13,540,553    4    4   3,338,936          0     0  2,744,860     11     1  ???:_IO_file_xsputn@@GLIBC_2.2.5
    7,925,820    6    2   2,211,865          0     0    552,965      0     0  ???:read_int
    7,005,464    3    3     778,402          0     0    389,219  5,450 1,087  ???:__GI_mempcpy
    5,345,440    3    3   1,290,275          0     0    921,625      0     0  ???:_IO_padn
    4,711,932    2    2     409,738         16     0          0      0     0  ???:strchrnul
    4,233,264    7    7     650,954          2     2    364,873      1     1  ???:str_to_mpn.isra.0
    3,870,846    4    4     368,652          0     0    921,630      5     0  ???:__mpn_extract_double
    3,796,909    4    3     506,255          0     0    253,128      0     0  ???:__mpn_lshift
    3,376,910    6    3     423,862          1     1    266,662      1     1  ???:__GI_memcpy
    3,119,755    7    3     550,545          0     0    367,030      0     0  ???:__mpn_rshift
    3,096,674    4    4     442,382          6     1          0      0     0  ???:__GI_strlen
    2,787,452    7    4     806,894          5     0    733,540      1     1  ???:__mpn_mul
    2,396,238    2    1     184,326          0     0          0      0     0  ???:isinf
    1,903,354    8    8     258,048          0     0    239,004      1     1  ???:round_and_return

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_clang/MD.c
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr       D1mr DLmr         Dw D1mw DLmw 

-- line 4 ----------------------------------------
          .    .    .           .          .    .          .    .    .   */
          .    .    .           .          .    .          .    .    .  #include <stdio.h>
          .    .    .           .          .    .          .    .    .  #include <math.h>
          .    .    .           .          .    .          .    .    .  #include <string.h>
          .    .    .           .          .    .          .    .    .  #include "coord.h"
          .    .    .           .          .    .          .    .    .  #include "util.h"
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  void evolve(int Nstep, double dt, double pos[][Ndim], double velo[][Ndim], double f[][Ndim], double * restrict vis, \
         80    0    0           5          0    0         45    0    0   double * restrict radius, double * restrict mass, double * restrict wind) {
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .    int  step;
          .    .    .           .          .    .          .    .    .    int i,j,k,l;
          .    .    .           .          .    .          .    .    .    double radius_sum, force_val, mass_square, r, delta_r;
          .    .    .           .          .    .          .    .    .    double delta_pos[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .           .          .    .          .    .    .    double tmp_f[Ndim + PADDING] __attribute__((aligned(64)));
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .    /*
          .    .    .           .          .    .          .    .    .    * Loop over timesteps.
          .    .    .           .          .    .          .    .    .    */
          .    .    .           .          .    .          .    .    .    Nstep = 1;
          .    .    .           .          .    .          .    .    .    for(step = 1;step<=Nstep;step++){
         20    1    1           0          0    0          5    0    0      printf("timestep %d\n",step);
         25    0    0          10          5    0          5    0    0      printf("collisions %d\n",collisions);
          .    .    .           .          .    .          .    .    .      
          .    .    .           .          .    .          .    .    .      // #pragma simd aligned linear(vis, mass)
          .    .    .           .          .    .          .    .    .      #pragma clang loop vectorize(enable) interleave(enable)
     20,620    3    3          15          0    0          5    0    0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .          .    .    .        /* calculate distance from central mass */
          .    .    .           .          .    .          .    .    .        r = add_norm(Ndim, pos[i]);
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .        /* set the viscosity term in the force calculation */
          .    .    .           .          .    .          .    .    .        /* add the wind term in the force calculation */
      5,120    0    0       5,120      2,560    0          0    0    0        visc_wind_force(Ndim, f[i], vis[i], velo[i], wind);
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .        /* calculate central force */
          .    .    .           .          .    .          .    .    .        #pragma clang loop unroll(enable)
          .    .    .           .          .    .          .    .    .        for(l=0; l<Ndim; l++) {
    184,320    3    2      25,600      2,560    0     15,360    0    0          f[i][l] -= force(G_mul_M_central*mass[i],pos[i][l],r);
          .    .    .           .          .    .          .    .    .        }
          .    .    .           .          .    .          .    .    .      }
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .      /*
          .    .    .           .          .    .          .    .    .      * add pairwise forces.
          .    .    .           .          .    .          .    .    .      */
          .    .    .           .          .    .          .    .    .      k = 0;
    107,650    2    2       5,135      2,250    0          0    0    0      for(i=0; i<Nbody; i++) {
          .    .    .           .          .    .          .    .    .        memset(tmp_f, 0, Ndim*sizeof(double));
          .    .    .           .          .    .          .    .    .        // #pragma simd aligned private(delta_r, delta_pos, force_val, mass_square, radius_sum) reduction(+:tmp_f, collisions)
          .    .    .           .          .    .          .    .    .        #pragma clang loop vectorize(enable) interleave(enable)
168,017,900    3    3      40,955     35,845    0          0    0    0        for(j=i+1; j<Nbody; j++) {
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .          /* calculate pairwise separation of particles */
          .    .    .           .          .    .          .    .    .          for(l=0; l<Ndim; l++) {
167,731,200    0    0 167,731,200 15,399,104    0          0    0    0            delta_pos[l] = pos[i][l] - pos[j][l];
          .    .    .           .          .    .          .    .    .          }
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .          /* calculate norm of separation vector */
          .    .    .           .          .    .          .    .    .          delta_r = add_norm(Ndim, delta_pos);
          .    .    .           .          .    .          .    .    .  
 41,932,800    0    0  41,932,800  5,125,563    0          0    0    0          radius_sum = radius[i] + radius[j];
 41,932,800    0    0  41,932,800  5,125,563    0          0    0    0          mass_square = G*mass[i]*mass[j];
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .          /*  flip force if close in */
335,462,400    0    0           0          0    0          0    0    0          if( delta_r >= radius_sum ) {
          .    .    .           .          .    .          .    .    .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .          .    .    .              force_val = force(mass_square,delta_pos[l],delta_r);
 83,865,600    1    1           0          0    0          0    0    0              tmp_f[l] -= force_val;
167,731,200    1    1  83,865,600 15,399,104    0 83,865,600    0    0              f[j][l] += force_val;
          .    .    .           .          .    .          .    .    .            }
          .    .    .           .          .    .          .    .    .          }
          .    .    .           .          .    .          .    .    .          else {
          .    .    .           .          .    .          .    .    .            for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .          .    .    .              force_val = force(mass_square,delta_pos[l],delta_r);
          .    .    .           .          .    .          .    .    .              tmp_f[l] += force_val;
          .    .    .           .          .    .          .    .    .              f[j][l] -= force_val;
          .    .    .           .          .    .          .    .    .            }
          .    .    .           .          .    .          .    .    .            collisions++;
          .    .    .           .          .    .          .    .    .          }
          .    .    .           .          .    .          .    .    .          k = k + 1;
          .    .    .           .          .    .          .    .    .        }
          .    .    .           .          .    .          .    .    .        for(l=0; l<Ndim; l++)
    102,400    2    1      40,960     20,160    0     40,960    0    0          f[i][l] += tmp_f[l];
          .    .    .           .          .    .          .    .    .      }
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .      // #pragma simd aligned linear(mass)
          .    .    .           .          .    .          .    .    .      #pragma clang loop vectorize(enable) interleave(enable)
          .    .    .           .          .    .          .    .    .      for(i=Nbody-1; i>=0; i--) {
          .    .    .           .          .    .          .    .    .        for(l=0; l<Ndim; l++) {
          .    .    .           .          .    .          .    .    .          /* update positions */
    286,720    5    5      51,200     14,731    0     15,360    0    0          pos[i][l] += + dt * velo[i][l];
          .    .    .           .          .    .          .    .    .          /* update velocities */
    220,165    5    5      20,480      7,051    0     15,360    0    0          velo[i][l] += + dt * (f[i][l]/mass[i]);
          .    .    .           .          .    .          .    .    .        }
          .    .    .           .          .    .          .    .    .      }
          .    .    .           .          .    .          .    .    .    }
         45    1    0          35         10    0          0    0    0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d167/s1770309/PP/performance_programming_coursework/src_clang/./util.h
--------------------------------------------------------------------------------
         Ir I1mr ILmr     Dr  D1mr DLmr     Dw  D1mw  DLmw 

-- line 2 ----------------------------------------
          .    .    .      .     .    .      .     .     .  #define UTIL_H
          .    .    .      .     .    .      .     .     .  
          .    .    .      .     .    .      .     .     .  #include <math.h>
          .    .    .      .     .    .      .     .     .  
          .    .    .      .     .    .      .     .     .  // #pragma omp declare simd
          .    .    .      .     .    .      .     .     .  inline void visc_wind_force(int N,double * restrict f, double vis, double * restrict velo, double * restrict wind) {
          .    .    .      .     .    .      .     .     .    int l;
          .    .    .      .     .    .      .     .     .    for(l=0; l<N; l++){
    204,810   20    4 20,490 7,685    0 15,360 7,679 1,448      f[l] = -vis * (velo[l] + wind[l]);
          .    .    .      .     .    .      .     .     .    }
          .    .    .      .     .    .      .     .     .  }
          .    .    .      .     .    .      .     .     .  
          .    .    .      .     .    .      .     .     .  // #pragma omp declare simd
          .    .    .      .     .    .      .     .     .  inline double add_norm(int N, double * restrict delta) {
          .    .    .      .     .    .      .     .     .    int k;
          .    .    .      .     .    .      .     .     .    double r = 0.0;
          .    .    .      .     .    .      .     .     .    for(k=0;k<N;k++){
209,766,400    3    3 15,360 7,680    0      0     0     0      r += (delta[k] * delta[k]);
          .    .    .      .     .    .      .     .     .    }
          .    .    .      .     .    .      .     .     .  
 41,943,040    0    0      0     0    0      0     0     0    return sqrt(r);
          .    .    .      .     .    .      .     .     .  }
          .    .    .      .     .    .      .     .     .  
          .    .    .      .     .    .      .     .     .  // #pragma omp declare simd inbranch
          .    .    .      .     .    .      .     .     .  inline double force(double W, double delta, double r) {
125,813,760    1    1      0     0    0      0     0     0    return W*delta/(pow(r,3.0));
          .    .    .      .     .    .      .     .     .  }
          .    .    .      .     .    .      .     .     .  
          .    .    .      .     .    .      .     .     .  #endif

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
75    3    2 77  100    0 56   13    9  percentage of events annotated

